= Convictions archi Octo

== Complexité

=== Complexité =  nombre de technologies différentes ^ 2 * nombres de liens entre ces techologies ^2

=== N'ajoutez pas un outil pour une seule fonctionalité


=== Coder ou "paramétrer" une application : la complexité est la même

=== Gestion de la complexité : apprenez à marcher avant de courir

== Outils

=== Ne croyez pas les éditeurs

=== Un outil n'est pas une réponse suffisante

=== Ne cédez pas à l'envie d'utiliser une techno à la mode alors que le besoin est déjà couvert

== Big Data

=== Big Data ne veut pas dire Hadoop

==== Hadoop n'est pas pour tout le monde
=== Hadoop n'est pas une archi économique
=== Vous n'avez probablement pas de "Big" Data

== Orga
=== L'archi est biaisée par l'orga et les budgets
=== Ne jamais essayer de mettre en place une archi non alignée avec l'orga
=== Il faut créer un climat où l'architecture peut être discutée

== Intégration
=== L'intégration c'est vital
=== Tous les projets sont des projets d'intégration

== Évolutions
=== Utilisez la méthode empirique : test, fail & learn
=== La dette vient toute seule : nos décisions étant faites dans un contexte précis, avec un degré de connaissance précis, certaines d'entre elles deviendront des freins à l'avenir
=== Ajouter c'est facile, c'est décomissionner qui est difficile
=== Un SI ça s'entretient
=== Une archi fournit des réponses raisonnées à un problème donné à un moment donné
=== Enfreindre les principes de son archi se paie toujours
=== Il faut toujours prévoir de rembourser ses dettes

== Architecte
=== Un architecte doit démystifier
=== Un archi doit avoir un vernis big data
=== Un archi doit avoir un bon carnet d'adresse
=== Un architecte doit s'intéresser au métier
=== Un archi doit pouvoir s'adresser à tout le monde
=== Un architecte fait des erreurs
=== Un archi doit savoir justifier ses choix
=== Votre architecture ne doit pas reposer sur des consultants
==== Il faut des compétences d'architecture en interne
==== Notamment pour avoir une cohérence globale
=== Ne pas faire confiance aux archi qui ne seront pas là le jour J

== Métier
=== Un Data Lake est n'est pas un projet IT
=== Le SI c'est le business

== Généralités
=== L'architecture concerne tout le monde
=== Une API est un point de couplage
=== Un élément d'architecture = un case d'usage + des features + des contraintes
=== A = B / R / O
==== Budget
==== business Rules
==== Organisation
=== Ayez un guide / checklist
=== L'architecture est imparfaite
=== Le SI peut être versionné
=== On ne peut pas compenser du mauvais delivery par de l'archi de SI
=== Pour acheter un logiciel, il faut connaître son besoin
=== L'archi doit tenir dans tes budgets
=== L'architecture peur permettre de résoudre des problèmes techniques

== Approche
=== Tout n'est pas critique
=== KISS : n'allez pas au delà du besoin
=== One size never fits all
=== La réutilisation ne se prévoit pas
==== Mutualiser est un 1er mauvais réflexe
==== Use before reuse
==== Il faut se poser la question
=== Vous n'êtes probablement pas un GDW
=== Monitorer ou mourir
=== Moins de couches d'architectures et d'architectes permet d'avoir une meilleure boucle de feedback
=== L'archi se fait avec la prod
=== Faites des POC
=== Séparer les objectifs et les solutions / patterns
=== Il n'y a pas d'orthodoxie
=== Il faut un catalogue de patterns / solutions avec plus d'un choix possible pour chaque besoin
=== Il n'y a pas de "meilleure" archi
=== Mettez à jour vos process d'archi
=== Il faut un peu de budget IT en propre, mais il faut mesurer son ROI

== Changement

=== Apprenez à faire du neuf avec du vieux

=== Plus ça change plus c'est la même chose

=== Il y aura des changements auxquels on ne sera jamais préparé
