= Balade sur l'omnicanal

Si votre système d'information n'est pas tombé dedans quand il était petit, faire de l'omnicanal est souvent un chantier semé d'embuches et de promesses d'éditeurs.

Cet article se propose de prendre du recul sur les outils pour revenir aux questions de fond qui se cachent derrière.

Il est aussi l'occasion de faire un peu d'histoire des SI pour comprendre comment on est arrivé à la situation actuelle.

== C'est quoi l'omnicanal ?

Un SI omnicanal est un SI qui permet aux différentes personnes qui l'utilisent de passer de manière fluide d'un canal de distribution à un autre.

L'exemple type est de pouvoir commencer à faire une demande de prêt immobilier sur son smartphone, de pouvoir la continuer sur son ordinateur portable une fois chez soi, puis éventuellement de boucler le dossier en se rendant en agence.

== Pourquoi c'est compliqué ?

Le chantier de transformation omnicanal se comporte de plusieurs évolutions différentes.

Pour comprendre la situation d'ensemble le mieux est de revenir en arrière et dérouler l'historique du SI car c'est lui qui explique la situation actuelle.

L'exemple donné ici représente un cas typique tel qu'on le retrouve chez de nombreux clients.

=== Les années 80 : au commencement était le mainframe

image::1.png[]

Les premières brique du SI se sont construits sur Mainframe, développées en COBOL ou équivalent.
Ces systèmes historiques sont généralement des développements maison, mais parfois des progiciels.

Les écrans permettant d'y accéder sont conçus pour les émployé·e·s et leurs sont réservés.
Les workflow de traitements et les fonctionalités qui sont exposées sont directement calqués sur les écrans.

Les traitements les plus coûteux en temps de calcul sont executés pendant la nuit ou le week-end, lorsque les employé·e·s ne travaillent pas et que la puissance de calcul de la machine est donc disponible.

=== Les années 2000 : l'arrivée du web, le bicanal

=== Les années 2010 : le mobile, 


=== Situation actuelle

image::2.png[]

* Ajout de sites web et appli mobile pour les clients, comme le workflow n'est pas le même que ceux du backoffice ils stockent les données intermédiaires et basculent les données dans le cœur métier lorsque le traitement est terminé, ou au mieux après un délai. Des services spécifiques ont été ajoutés pour cela dans le coeur métier
* Des services spécifiques pour les partenaires

Problèmes :

- pas d'omnicanal
- transmissions non satisfaisantes au reste du SI (exemple : souscriptions incomplètes pas transmises au marketing)

=== Cible

image::3.png[]

Avoir des services utilisables par tous et sans stockage intermédiaire pour faire de l'omnicanal.

== Que faut-il pour avoir un bon omnicanal ?

- Un système de stockage
- Un ensemble de règles métier de validation
- Un workflow permettant de définir les macro-étapes des process et les responsabilités (aussi appelé machine à état)
- Des services facilement utilisables

=> Chacun est capable d'avoir son workflow tant qu'il s'inscrit dans les macro-étapes, l'objectif est de pouvoir s'arrêter à n'importe quel point tout en ayant le minimum de rigidité possible

image::4.png[]
image::5.png[]

[TIP]
====
Les mêmes caractéristique sont intéressantes pour faire du reuse entre pays du cœur métier, à condition qu'il soit configurable.
====

== Quel est le problème ?

Les difficultés 
- Identifier le "macro-processus" qui sert de squelettes demande une bonne connaissance métier
- Définir les bons services
- Être capable de le faire vivre en harmonie avec les consommateurs
- Faire évoluer le cœur métier

== Peut-on se passer d'un BPM pour implémenter de l'omnicanal ?

Je n'ai pas mis la partie implémentation du workflow dans les choses difficiles.

Un BPM est plutôt un antipattern ici: faut lui exposer des services qu'il comprend, et lui même expose des services qui ne seront pas forcément ceux qui seront pas forcément adaptés aux consommateurs.

[NOTE]
====
TODO : Schéma avec exemple d'un BPM
====

Si vous le voulez vous pouvez utiliser un moteur de workflow léger, mais autant que possible c'est bien de garder la main sur le code "métier".

== Comment faire ?

Le cœur métier contient trois éléments qui ont de la valeur :
- les règles de validation
- les règles de traitements
- l'interconnection avec le reste du SI, mais si pas toujours satisfaisant

Deux choses non satisfaisantes :
- règles d'intégrité des données alignées avec le process historique
- process hardcodé

Stratégies possibles :

=== Tout recoder

Si tu peux ça peut etre cool, par contre projet stratégique très risqué.

=== Rendre le cœur métier historique omnicanal

Projet dont le risque dépend de la maîtrise que vous avez du bousin

=== Ajouter une couche omnicanal

C'est la solution la plus légère, on construit une surcouche, soit from scratch soit en partant d'un des backend existant.

Ça va demander de la duplication d'une partie du cœur métier plus importante que ce que vous avez maintenant.

Ça va demander de modifier les services exposés par le cœur métier.

Ensuite on migre les consommateurs vers cette couche.

Puis on peut commencer à remonter du métier et à dégonfler le cœur métier.

== Conclusion

Omnicanal c'est quelque chose de structurant pour le SI, chantier de longue haleine.

En fait l'omnicanal ça consiste à a

La difficulté est côté métier et côté existant.