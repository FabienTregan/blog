= Agile et dépendances
Julien Kirch
v0.1, 2018-12-29
:article_lang: fr

WARNING: ⚠️Il s'agit d'un mélange entre un plan détaillé et un brouillon => seul le fond est important !⚠️️️️

Dans un projet appliquant des pratiques agiles, il est possible de livrer de nouvelles fonctionnalités rapidement en s'appuyant sur des cycles courts.

Une des manières d'y parvenir est d'avoir une équipe avec un fort niveau d'autonomie, car les dépendances extérieures créent des risques de ralentissements.

Une équipe parfaitement indépendante, cela peut exister sur un projet isolé d'un SI ou dans un environnement parfaitement stabilisé (c'est-à-dire mature et qui n'évolue pas).

Dans un SI ce n'est pas le cas de toutes les applications : dans beaucoup de cas ces dépendances existent et ont souvent des conséquences significatives sur le fonctionnement des projets.

== Un exemple concret

Une nouvelle fonctionnalité F1 du projet P1 nécessite une fonctionnalité F2 d'un projet P2 qui n'existe pas encore : un service manquant, une donnée incomplète …

Pour cela il faut faire une demande à P2, que P2 accepte la demande, que P2 la réalise et mette F2 à disposition de P1.

Pour P2, réaliser F2 signifie aussi retarder le développer de fonctionnalités qui lui sont directement nécessaires.

Pour P2 il peut être difficile de mesurer de la priorité "réelle" de F1 -- si tant est qu'une telle chose existe -- et donc de prendre la bonne décision.

Cela mène typiquement à des phénomènes link:https://fr.wikipedia.org/wiki/Inversion_de_priorité[d'inversion de priorité] où les optimisations globales et locales s'opposent.

== Qu'est ce qui se passe quand ça se passe mal ?

Comme souvent, en l'absence de gouvernance satisfaisante, c'est l'informalité qui prend la main.

Comme le disait Ian Malcolm dans Jurassic Park "_life finds a way_".
Cela ne veut pas dire que des vélociraptors vont attaquer votre SI, mais la situation ne sera quand même pas enviable.

Tout d'abord les décisions de priorités seront arbitrées par des jeux de pouvoir et des rapports de force, qui font que certains projets obtiendront ce qu'ils demandent, et pas les autres.

Ensuite les projets qui ne parviennent pas à leurs fins de manière directe essaieront de faire au mieux avec les moyens disponibles.

Par exemple : demander les données aux projets qui sont en mesure de les fournir rapidement, même s'il ne s'agit pas de sources officielles ou des sources les mieux adaptées au projet.

On peut par exemple tenter de récupérer des données opérationnelles depuis un DataLake.

Cela aura souvent des effets secondaires sur le SI comme des dépendances cachées ou des risques sur la qualité des données.

== Quel rapport avec l'agile ?

Cela se produit sur tous les projets, en agile comme en cascade, mais l'agile est particulièrement concerné.

Tout d'abord, avec les dépendances il devient difficile d'avoir des cycles de développement courts et à durée prévisible alors qu'ils sont primordiaux pour tirer bénéfice des pratiques agiles.

Une «transformation agile » qui ne prend pas en compte ce type de problème prend le risque de décrédibiliser l'agile et s'enliser.

Ensuite, en donnant plus de place aux POs dans le pilotage des projets à la place des structures de gouvernance plus formelles, j'ai l'impression que l'agile a supprimé une boucle de feedback qui permettait aux différents projets de pouvoir être entendus.

Les systèmes de gouvernance agile comme SAFE, en plus d'alourdir les choses, ne sont qu'une réponse partielle car ils couvrent les ensembles de de projets pré-identifiés comme ayant des dépendances fortes. Ils ne couvrent pas les cas de dépendances entre projets plus éloignés dans l'organisation, ou de besoins qui apparaissent dans la vie des projets et qui n'étaient pas anticipés.

L'objectif n'est pas de revenir à une gouvernance plus lourde, par exemple de type SAFE, mais de trouver comment faire au mieux.

Finalement la mode de réduire au maximum la taille des équipes projets, par exemple dans les microservices, augmente le nombre d'éléments du système à coordonner entre eux.
Le pire étant les demandes en cascades du type "moi A j'ai besoin d'un truc de B, mais pour ça B a besoin d'un truc de C".

== Que faire ?

Il suffit de faire en sorte que tous les projets soient indépendants les uns des autres.

Non je blague.

Il suffit de passer tous les projets en agile, et de faire en sorte que tous les PO soient capables de prendre en point à point des décisions maximisant l'optimum global.

Non je blague encore.

Je pense qu'il n'y a pas de recettes magiques : c'est un problème inévitable quand on a un SI d'une certaine taille, mais des pratiques peuvent aider.

== Côté demandeur

Si vous est du côté des projets demandeurs, ce que vous pouvez faire :

* Connaître assez le système pour pouvoir prédire les besoins qui vont solliciter une dépendance avec une précisions acceptable : cela évite les mauvaises surprises ;
* Être capable d'avoir rapidement un ordre de grandeur du temps nécessaire. Cela nécessite de connaître les interlocuteurs, et d'avoir de l'expérience sur l'existant. Le chiffre sera probablement dépendant de la taille du besoin et de à qui vous demandez.
Cela vous permet de faire des arbitrage (est ce qu'on laisse tomber si c'est trop long ?) et de mieux planifier.

== Côté fournisseur

Rien à mettre là : si le problème c'est eux je ne vois pas comment leur demander des choses.

== Côté DSI

La DSI peut faire de nombreuses choses dans ce domaine, du plus simple au plus difficile :

* Faire en sorte que des services existants déjà exposés soient facilement utilisables par les autres applications avec un minimum de dépendances
* Faire en sorte que les projets puissent obtenir rapidement des arbitrages : il est difficile de faire en sorte d'améliorer le TTM car ça suppose de réorganiser des projets, par contre obtenir un arbitrage oui/non et le délai ça peut déjà aider
* Faire en sorte de faciliter le développement de ces nouvelles demandes, par exemple par la capacité à fournir des environnements de test pendant les phases de mise au point
* Travailler sur le décomissionnement, car fournir une nouvelle version N+1 d'un service cela veut dire une version supplémentaire à maintenir jusqu'à ce que les consommateurs des versions précédentes N, N-1 … décident de se mettre à jour
* Tracer ce type de demandes pour avoir de la visibilité sur le problème : est ce qu'il arrive souvent, à quels endroits ?
* Essayer de piloter la décentralisation des projets / données / services pour limiter le nombre de guichets, un peu de centralisation sur les données "maîtres" en le structurant dans des référentiels permet par exemple de faciliter les choses

Le dernier point est primordial : il faut que vos projets soient adaptés à votre capacité à faire des choix et à les mettre en œuvre.

== Côté métier

Pour les développements inter-projets d'une certaine taille, le processus d'arbitrage devrait idéalement reposer sur le métier car c'est lui qui a la connaissance et la légitimité pour le faire.

Cela signifie que le métier doit s'approprier le sujet, et trouver une manière de le traiter.

Dans des grandes organisations, cela signifie souvent que différentes branches du métier doivent apprendre à travailler ensemble pour des raisons d'IT, car elles sont impliquées dans les mêmes projets, alors qu'elles n'ont que rarement à le faire par ailleurs.

Il peut s'agir d'un changement difficile à opérer.

Pour les demandes d'une taille plus réduite, les décisions peuvent être déléguées aux projets, sous conditions que le résultat soient satisfaisants. Cela permet de limiter le coût organisationnel en limitant les risques d'erreur, à condition de donner des marges de manœuvre suffisante aux projets.

== En conclusion

Ayez le courage de mesurer vos TTM réels, c'est à dire ceux qui prennent en compte toute la chaîne de dépendance, et pas seulement les développements propres à chaque projet.

Si les dépendances sont mal gouvernées dans votre SI, votre capacité à travailler mieux pourrait être très limitée.

Essayer d'optimiser les choses au mieux pour chaque projet, sans attendre une solution globale qui résoudrait tout.

Le mieux à court et moyen terme et d'adapter votre IT à votre organisation, quitte à renoncer à certains projets ou à certaines approches, car l'inverse ne fonctionne pas.