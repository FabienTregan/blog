= Agile et dépendances
Julien Kirch
v0.1, 2018-12-29
:article_lang: fr

Dans un projet appliquant des pratiques agiles, il est possible de livrer de nouvelles fonctionnalités rapidement en s'appuyant sur des cycles courts.

Une des manières d'y parvenir est d'augmenter l'autonomie de l'équipe, car les dépendances extérieures créent des risques de ralentissements.

Une équipe parfaitement isolée, cela peut exister sur un projet isolé ou dans un environnement parfaitement stabilisé (c'est-à-dire mature et qui n'évolue pas).


Agile : on peut itérer rapidement si on est autonome sur les choses qui fait qu'on n'a pas de dépendances.

Fonctionne sur un projet isolé, ou dans un environnement parfaitement stabilisé (mature et qui n'évolue pas).

Dans un SI ce n'est pas le cas de toutes les applications : dans beaucoup de cas ces dépendances existent et ont des conséquences significatives.

== Un exemple concret

Pour une nouvelle fonctionnalité du projet A, il a besoin d'une fonctionnalité F d'un projet B qui n'existe pas encore : un service manquant, une donnée incomplète …

Pour cela il faut faire une demande à B, que B accepte la demande, que B la réalise et mette la fonctionnalité à ma disposition.

Pour B, cela signifie du temps à passer en échange, mais cela signifie aussi que B doit déprioriser certaines de ses besoins pour faire de la place à F.

Pour B il peut être difficile de mesurer de la priorité "réelle" de F -- si tant est qu'une telle chose existe -- et donc de prendre la bonne décision.

Cela mène typiquement à des phénomènes link:https://fr.wikipedia.org/wiki/Inversion_de_priorité[d'inversion de priorité] où les optimisations globales et locales s'opposent.

== Qu'est ce qui se passe quand ça se passe mal ?

Comme souvent, en l'absence de gouvernance satisfaisante, c'est l'informalité qui prend la main.

Comme le disait Ian Malcolm dans Jurassic Park "_life finds a way_".
Cela ne veut pas dire que des vélociraptors vont attaquer votre SI, mais la situation ne sera quand même pas enviable.

Tout d'abord les décisions seront arbitrées par des jeux ce pouvoir et des rapports de forces officieux, qui font que certains projets auront ce dont ils ont besoin, et pas les autres.

Ensuite les projets essaieront de faire au mieux, ce qui signifie faire avec les moyens dont ils disposent.

Exemple : demander les données aux projets qui est en mesure de les fournir rapidement, même si ça n'est pas une source officielle ou la source la mieux adaptée au projet

Cela signifie des dépendances cachées qui se créent dans le système, et peut-être des risques sur la qualité des données

== Quel rapport avec l'agile ?

Le problème se produit également dans les projet en cascade, mais les pratiques agiles ajoutent des spécificités.

Avec les dépendances il n'est pas possible d'être en capacité d'avoir un TTM bas en s'appuyant sur des cycles courts et en ayant la maîtrise de ce que l'on fait, les promesses de l'agile ne sont donc pas remplies.

Le vrai TTM d'un projet est celui qui s'observe dans des conditions réalistes, et pas le meilleur TTM possible dans les conditions idéales.

Une «transformation agile» qui ne prend pas en compte ce type de problème prend le risque de décridibiliser l'agile et s'enliser.

Ensuite, en donnant plus de place aux POs dans le pilotage des projets à la place des structure de gouvernances plus formelles, j'ai l'impression que l'agile a supprimé une boucle de feedback qui permettait aux différents projets de pouvoir être entendus.

Les systèmes de gouvernance agile comme SAFE, en plus d'alourdir les choses, ne sont qu'une réponses partielle car ils couvrent les ensembles de de projets pré-identifés comme ayant des dépendances fortes. Il ne couvrent pas les cas de dépendances entre projets plus éloignés dans l'organisation, ou de besoins qui apparaîssent dans la vie des projets et qui n'étaient pas anticipés.

L'objectif n'est pas de revenir à une gouvernance plus lourde, par exemple de type SAFE, mais de trouver comment faire au mieux.

Finalement la mode de réduire au maximum la taille des équipes projets, par exemple dans les microservice, augmente le nombre d'élements du systèmes à coordonner entre eux.
Le pire étant les demandes en cascades du type "moi A j'ai besoin d'un truc de B, mais pour ça B a besoin d'un truc de C".

== Que faire ?

Il suffit de faire en sorte que tous les projets soient indépendants les uns des autres.

Non je blague.

Il suffit de passer tous les projets en agile, et de faire en sorte que tous les PO soient capable de prendre en point à point des décisions maximisant l'optimum global.

Non je blague encore.

Je pense qu'il n'y a pas de recettes magiques : c'est un problème inévitable quand on a un SI d'une certaine taille, mais des pratiques peuvent aider.

== Côté demandeur

Si vous est du côté des projets demandeurs, ce que vous pouvez faire

* Connaître assez le système pour pouvoir prédire les besoins qui vont solliciter une dépendance avec une précisions acceptable : cela évite les mauvaises suprises
* Être capable d'avoir rapidement un ordre de grandeur du temps nécessaire. Cela nécessite de connaître les interlocuteurs, et d'avoir de l'expérience sur l'existant. Le chiffre sera probablement dépendant de la taille du besoin et de à qui vous demandez.
Cela vous permet de faire des arbitrage (est ce qu'on laisse tomber si c'est trop long ?) et de mieux planifier.

== Côté fournisseur

Rien à mettre là : si le problème c'est eux je ne vois pas comment leur demander des choses.

== Côté SI

Du plus simple au plus difficile

* Faire en sorte que des services existants déjà exposés soient facilement utilisables par les autres applications avec un minimum de dépendances
* Faire en sorte que les projets puissent obtenir rapidement des arbitrages : il est difficile de faire en sorte d'améliorer le TTM car ça suppose de réorganiser des projets, par contre obtenir un arbitrage oui/non et le délai ça peut déjà aider
* Faire en sorte de faciliter le développement de ces nouvelles demandes, par exemple par la capacité à fournir des environnement de tests pendant les phases de mise au point
* Travailler sur le décomissionnement, car fournir une nouvelle version N+1 d'un service cela veut dire une version supplémentaire à maintenir jusqu'à ce que les consommateurs des versions précédentes N, N-1 … décident de se mettre à jour
* Tracer ce type de demandes pour avoir de la visibilité sur le problème : est ce qu'il arrive souvent, à quels endroits ?
* Essayer de piloter la décentralisation des projects / données / services pour limiter le nombre de guichets, un peu de centralisation sur les données "maîtres" en le structurant dans des référentiels permet par exemple de faciliter les choses

Le dernier point est primordial : il faut que vos projets soient adaptés à votre capacité à faire des choix et à les mettre en œuvre.

== Conclusion : et le métier

Jusqu'ici je n'ai rien proposer sur le processus d'arbitrage en lui-même.

Ma conviction est qu'il doit reposer sur le métier : il doit comprendre que c'est un problème, et s'approprier ce sujet.

Ce n'est pas à l'IT de mettre de l'arbitrage ou de la gouvernance pour prioriser les demandes entre projets : l'IT peut expliquer, montrer qu'il y a un soucis, mais ne doit pas s'impliquer dans les décisions : même s'il est tendant de vouloir aider, il y a beaucoup à perdre en énergie et en bonne volonté.

Il s'agit probablement d'un des sujets les plus compliqués à apprendre pour une organisation.

En attendant que les choses progressent la solution est de continuer à adapter votre IT à la maturité de l'organisation, car l'inverse ne fonctionne pas.