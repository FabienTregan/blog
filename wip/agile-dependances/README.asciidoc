= Agile et dépendances
Julien Kirch
v0.1, 2018-12-29
:article_lang: fr

* [ ] Côté demandeur : comment développer une telle connaissance ? Je vois d'ici les métiers revenir avec leur MOA/MOE intermédiaires, non ? A moins que ton message soit "en 2019 quand on travaille sur un produit tech, il faut un minimum connaître la tech correspondante" ; Rapprocher Demandeur et Métier ?
* [ ] Côte fournisseur : pas très clair pour moi, que puis-je faire exactement ?
* [ ] Côté DSI : le paragraphe qui gagnerait à être développé : plutôt 2-3 lignes par item qu'une seule pour rentrer dans le détail
* [ ] Côté Métier : ok, serait intéressant de préciser les modalités de collaboration...
* [ ] Conclusion : par quoi préconiserais-tu de commencer ? Concrètement, qu'entends-tu ici par adapter les projets à l'orga ?

WARNING: ⚠️Il s'agit d'un brouillon => seul le fond est important !⚠️️️️

Un des objectifs principaux des différentes approches agiles est de pouvoir livrer de nouvelles fonctionnalités rapidement en s'appuyant sur des itérations courtes.

Une des manières d'y parvenir est d'avoir une équipe avec un fort niveau d'autonomie, car les dépendances extérieures créent des risques de ralentissements, par exemple quand il faut attendre qu'un autre groupe fasse quelque chose dont on a besoin.

Une équipe parfaitement indépendante, cela peut exister sur un projet isolé d'un SI ou dans un environnement parfaitement stabilisé, c'est-à-dire mature et qui n'évolue pas.

Dans un SI ce n'est pas le cas de toutes les applications : dans beaucoup de cas ces dépendances existent et ont souvent des conséquences significatives sur le fonctionnement des projets.

Que peut-on faire pour, dans ces situations, pouvoir travailler au mieux ou au moins ne pas avoir de mauvaises surprises ?

== Un exemple

Une nouvelle fonctionnalité `F1` du projet `P1` nécessite une fonctionnalité `F2` d'un projet `P2` qui n'existe pas encore : un service manquant, une donnée incomplète …

Pour cela il faut faire une demande à `P2`, que `P2` accepte la demande, que `P2` la réalise et mette `F2` à disposition de `P1`.

Pour `P2`, réaliser `F2` signifie aussi retarder le développer de fonctionnalités qui lui sont directement nécessaires.

Pour `P2` il peut être difficile de mesurer de la priorité "réelle" de `F1` -- si tant est qu'une telle chose existe -- et donc de prendre la bonne décision.

image::exemple.png[align="center"]

Cela mène typiquement à des phénomènes link:https://fr.wikipedia.org/wiki/Inversion_de_priorité[d'inversion de priorité] où les optimisations globales (au niveau de l'entreprise) et locales (au niveau de chaque équipe) s'opposent.

== Qu'est ce qui se passe quand ça se passe mal ?

Comme souvent, quand la gouvernance officielle n'est pas satisfaisante, c'est l'informalité qui prend la main.

Comme le disait Ian Malcolm dans Jurassic Park "_life finds a way_".
Cela ne veut pas dire que des vélociraptors vont attaquer votre SI, mais la situation ne sera quand même pas enviable.

Tout d'abord les décisions de priorités seront arbitrées par des jeux de pouvoir et des rapports de force, qui font que certains projets obtiendront ce qu'ils demandent, et pas les autres.

Ensuite les projets qui ne parviennent pas à leurs fins de manière directe essaieront de faire au mieux avec les moyens disponibles.

Par exemple : demander les données aux projets qui sont en mesure de les fournir rapidement, même s'il ne s'agit pas de sources officielles ou des sources les mieux adaptées au projet.

On peut par exemple tenter de récupérer des données opérationnelles depuis un DataLake.

Cela aura souvent des effets secondaires sur le SI comme des dépendances cachées ou des risques sur la qualité des données.

== Quel rapport avec l'agile ?

Cela se produit sur tous les projets, en agile comme en cascade, mais l'agile est particulièrement concerné pour deux raisons.

Tout d'abord comme vu plus haut, avec les dépendances il devient difficile d'avoir des cycles de développement courts et à durée prévisible alors qu'ils sont primordiaux pour tirer bénéfice des pratiques agiles : les dépendances font plus mal en agile car on a moins le temps d'atte,dre.

Une « transformation agile » qui ne prend pas en compte ce type de problème prend le risque de s'enliser voire de décrédibiliser l'agile.

Ensuite, en donnant plus de place aux POs dans la prise de décision par rapport à des structures de gouvernance plus formelles j'ai l'impression que l'agile a supprimé une boucle de feedback qui permettait aux différents projets de pouvoir être entendus.

Par exemples les comités de suivis tous les mois fournissaient un cadre permettant à des parties prenantes hors projet de s'exprimer pour remonter leurs besoins, et des responsables hiérarchiques pouvaient procéder aux arbitrages nécessaires.
La nouvelle organisation permet des décisions plus rapides et est donc avantageuse la majorité du temps, mais peut rendre plus difficiles aux voix extérieures de se faire entendre.

Les systèmes de gouvernance agile comme SAFE, qui savent organiser la gestion des dépendances entre projets, ne sont qu'une réponse partielle car ils couvrent les ensembles de de projets pré-identifiés comme ayant des dépendances fortes. Ils ne couvrent pas les cas de dépendances entre projets plus éloignés dans l'organisation, ou de besoins qui apparaissent dans la vie des projets et qui n'étaient pas anticipés.

L'objectif n'est pas d'aller vers une gouvernance plus structurée, mais de trouver comment faire au mieux en gardant une organisation légère.

Finalement la mode de réduire au maximum la taille des équipes projets, par exemple dans les microservices, augmente le nombre d'éléments du système à coordonner entre eux.
Le pire étant les demandes en cascades du type "moi A j'ai besoin d'un truc de B, mais pour ça B a besoin d'un truc de C".

== Que faire ?

Il suffit de faire en sorte que tous les projets soient indépendants les uns des autres.

Non je blague.

Il suffit de passer tous les projets en agile, et de faire en sorte que tous les PO soient capables de prendre en point à point des décisions maximisant l'optimum global.

Non je blague encore.

Je pense qu'il n'y a pas de recettes magiques : c'est un problème inévitable quand on a un SI d'une certaine taille, mais des pratiques peuvent aider.

== Côté demandeur

Si vous êtes du côté des projets demandeurs, ce que vous pouvez faire :

* Connaître assez le système pour pouvoir prédire les besoins qui vont solliciter une dépendance avec une précisions acceptable : cela évite les mauvaises surprises ;
* Être capable d'avoir rapidement un ordre de grandeur du temps nécessaire. Cela nécessite de connaître les interlocuteurs, et d'avoir de l'expérience sur l'existant. Le chiffre sera probablement dépendant de la taille du besoin et de à qui vous demandez.
Cela vous permet de faire des arbitrage (est ce qu'on laisse tomber si c'est trop long ?) et de mieux planifier.

== Côté fournisseur

Si le problème de départ est d'avoir de la disponibilité de la part des projets fournisseurs, il est difficile de leur demander des choses.

Ce qui me paraît essentiel, est de pouvoir avoir des réponses aux questions de priorisation dans un délai raisonnable.
S'il n'est pas possible d'avoir des leviers directs sur la priorisation des autres projets, il faut au moins être capable d'avoir les informations nécessaires pour organiser sa propre roadmap.

== Côté DSI

La DSI peut faire de nombreuses choses dans ce domaine, du plus simple au plus difficile :

* Faire en sorte que des services existants déjà exposés soient facilement utilisables par les autres applications avec un minimum de dépendances
* Faire en sorte que les projets puissent obtenir rapidement des arbitrages : il est difficile de faire en sorte d'améliorer le TTM car ça suppose de réorganiser des projets, par contre obtenir un arbitrage oui/non et le délai ça peut déjà aider
* Faire en sorte de faciliter le développement de ces nouvelles demandes, par exemple par la capacité à fournir des environnements de test pendant les phases de mise au point
* Travailler sur le décomissionnement, car fournir une nouvelle version N+1 d'un service cela veut dire une version supplémentaire à maintenir jusqu'à ce que les consommateurs des versions précédentes N, N-1 … décident de se mettre à jour
* Tracer ce type de demandes pour avoir de la visibilité sur le problème : est ce qu'il arrive souvent, à quels endroits ?
* Essayer de piloter la décentralisation des projets / données / services pour limiter le nombre de guichets, un peu de centralisation sur les données "maîtres" en le structurant dans des référentiels permet par exemple de faciliter les choses

Le dernier point est primordial : il faut que vos projets soient adaptés à votre capacité à faire des choix et à les mettre en œuvre.

Bien entendu il n'est pas possible de mener de front tous ces chantiers mais ceux qui sont les mieux adaptés à votre contexte et aux moyens disponibles.

== Côté métier

Pour les développements inter-projets d'une certaine taille, le processus d'arbitrage devrait idéalement reposer sur le métier car c'est lui qui a la connaissance et la légitimité pour le faire.

Cela signifie que le métier doit s'approprier le sujet, et trouver une manière de le traiter.

Pour les demandes de petite taille réduite, les décisions peuvent être déléguées aux projets, sous conditions que le résultat soient satisfaisants. Cela permet de limiter le coût organisationnel en limitant les risques d'erreur, à condition de donner des marges de manœuvre suffisante aux projets.
Mais pour les adhérence de plus grande taille cela ne fonctionne pas.

Dans le cas idéal, les différents métiers impliqués ont l'habitude de travailler ensemble, et sauront prioriser les demandes d'une manière qui soit acceptable aux différentes parties prenantes.
En principe, si deux projets dépendant de deux métiers différents ont à travailler ensemble, c'est parce que les métiers correspondants ont des liens.

Dans le cas contraire, cela peut signifier que différentes branches du métier doivent apprendre à travailler ensemble pour des raisons d'IT, alors qu'elles n'ont que rarement à le faire par ailleurs.

Par expérience cet apprentissage est souvent difficile, en particulier lorsqu'un des métiers à plus d'intérêt que les autres à cette "collaboration".

Ce type de dépendance doit être identifié lors du cadrage d'un projet et la question doit être traitée avant de lancer les développements en trouvant une manière de travailler ensemble, surtout si le niveau de dépendance est important.

Si on juge que la réponse n'est pas compatible avec les contraintes existantes comme les plannings, il peut être nécessaire de recadrer les projets.

== En conclusion

Ayez le courage de mesurer vos TTM réels, c'est à dire ceux qui prennent en compte toute la chaîne de dépendance, et pas seulement les développements propres à chaque projet.

Si les dépendances sont mal gouvernées dans votre SI, votre capacité à travailler mieux pourrait être très limitée.

Essayer d'optimiser les choses au mieux pour chaque projet, sans attendre une solution globale qui résoudrait tout.

Le mieux à court et moyen terme et d'adapter vos projets à votre organisation, quitte à renoncer à certains projets ou à certaines approches, car l'inverse ne fonctionnera pas.