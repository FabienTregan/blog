= Messages et services
Julien Kirch
v0.1, 2019-04-29
:article_lang: fr

D'abord trois définitions, pas précises mais qui donnent une idée{nbsp}:

[quote]
____
_Réponse synchrone_{nbsp}: je veux une réponse maintenant +
_Réponse asynchrone_{nbsp}: je veux une réponse mais quand ça t'arrange, même si je préférerai que ça arrive dans pas trop longtemps +
_Pas de réponse_{nbsp}: la réponse ne m'intéresse pas
____

Ma thèse{nbsp}: ce qu'on appelle "`services`" (SOAP, REST, CORBA,{nbsp}…) est un certain type de messages, et pas une catégorie à part.

Voilà ce que j'entends parfois autour de moi{nbsp}:

[cols="4", options="header", cols="h,1,1,1", stripes=none] 
|===
|
^.^|Réponse synchrone
^.^|Réponse asynchrone
^.^|Pas de réponse

>.^|1{nbsp}consommateur
^.^|Services
^.^|Euh, messages{nbsp}?
^.^|Euh, messages{nbsp}?

>.^|X{nbsp}consommateurs
^.^|
^.^|Messages{nbsp}!
^.^|Messages{nbsp}!

|===

Voila la réalité

[cols="4", options="header", cols="h,1,1,1", stripes=none] 
|===
|
^.^|Réponse synchrone
^.^|Réponse asynchrone
^.^|Pas de réponse

>.^|1{nbsp}consommateur
^.^|Services +
Messages
^.^|Messages
^.^|Messages

>.^|X{nbsp}consommateurs
|
^.^|Messages
^.^|Messages
|===

Exemples{nbsp}:

* Messages synchrones vers 1 consommateur{nbsp}: JMS, IBM MQ
* Messages asynchrones vers X consommateurs{nbsp}: multicast la plupart des files de messages le supportent
* Messages synchrones vers 1 consommateur{nbsp}: la plupart des files de messages le supportent, s'agit d'un cas simplifié du cas précédent
* Les messages avec réponses synchrones peuvent s'implémenter avec deux systèmes de messages sans réponse, et un message sans réponse avec un système à réponse asynchrone sans s'intéresser aux réponses

D'ailleurs il est tout à fait possible d'utiliser une file de message pour faire de l'appel de service{nbsp}: IBM MQ peut exposer du SOAP et est utilisé de cette manière dans de nombreuses organisations, c'est d'ailleurs une des manières historiques d'exposer des services.

Mon hypothèse{nbsp}: l'utilisation du mot "`services`" tire son origine des web services, c'est à dire des services SOAP.
SOAP est une manière d'exposer des appels synchrones entre un service exposant et un service consommateur.
SOAP et les pratiques qui l'accompagnaient promettait de nombreux avantages et du coup le mot "`service`" s'est implanté comme dénomination comme s'il était différent du mode messages.

Une caractéristique des services qui n'est pas pas partagée par tous les systèmes de messages est le fait que l'intermédiaire entre l'exposant et le consommateur ne stocke pas de messages d'une manière résiliente{nbsp}:
certaines technologies de message peuvent faire de la persistance pour pallier à des redémarrages, mais pas toutes, par exemple link:http://zeromq.org[ZeroMQ].

Une partie des appels de service peut se faire sans intermédiaire, par exemple par appels HTTP directs entre serveurs, mais souvent c'est sans compter sans les intermédiaires cachés que sont les proxys qui peuvent s'occuper de la gestion des droits ou du monitoring.

Une autre différence est le mode de communication, soit en mode procédure "`fait moi ça`" soit en mode notification "`ceci est arrivé`", cela structure le format et le contenu qui est transmis, il y a des habitudes et certaines approches fonctionnent mieux avec un ou l'autre mode, mais il n'y a pas de séparation "`dure`".

Un mot sur l'implémentation{nbsp}: il faut faire une différence entre le service rendu par un outil et son implémentation.
Même si l'un peut avoir une influence sur l'autre, il ne faut pas les confondre.

Par exemple le fait qu'un système de communication _rendant un service synchrone_ soit une surcouche d'un système asynchrone ne le rend pas faussement synchrone, ou ne diminue en rien ses qualités{nbsp}: par exemple TCP/IP est un système de message asynchrones, sur lequel fonctionne REST qui est un système synchrone.

Du point de vue strict, très peu de systèmes sont réellement synchrones "`du haut en bas`" dans un système informatique classique comprenant plusieurs machines.

De même un protocole ou un outil peut vérifier que les données soient bien arrivées à destination d'un point de vue technique sans attendre de réponse métier et donc être toujours comme TCP/IP.

Conclusion{nbsp}: le mot "`service`" peut avoir son utilité car il désigne un cas particulier c'est à dire certains protocoles et outils permettant une communication synchrone en point à point, mais attention à ne pas lui faire dire ce qu'il ne dit pas.