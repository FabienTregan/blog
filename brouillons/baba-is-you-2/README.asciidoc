[#baba-is-you-2]
ifeval::["{doctype}" == "book"]
= Part 2: plumbing
endif::[]
ifeval::["{doctype}" != "book"]
= Writing a "`Baba Is You`" solver, part 2: plumbing
endif::[]
:author: Julien Kirch
:revnumber: v0.1
:docdate: 2019-05-09
:article_lang: en
:ignore_files: app1.java, fifoqueue1.java, graph2.mmd, graph2.png, level1.java, level2.java, log1.txt, state1.java
:article_image: first-level2.png
:source-highlighter: pygments
:pygments-style: friendly
:article_description: Technical code and no business logic, at least I avoided creating a frameworkâ€¦
:figure-caption!:

ifeval::["{doctype}" == "book"]
Following the first part about reading the levels, it's time to do some plumbing.
endif::[]
ifeval::["{doctype}" != "book"]
Following link:../babis-you-1/[the first part] about reading the levels, it's time to do some plumbing.
endif::[]

Before dealing with the solving logic, some plumbing is required to establish the game loop.

ifdef::backend-pdf[]
image::../baba-is-you-2/graph2.png[width=784,height=468,align="center"]
endif::[]
ifndef::backend-pdf[]
image::../baba-is-you-2/graph2.svg[width=784,height=468,align="center"]
endif::[]

Most of the code shown here is ported from my previous link:https://github.com/archiloque/rgbexpress[efforts].

== The level

First the `Level` class will contain data related to a game level, at first only the information found in the level we read in the first part, then -- by experience -- we'll add other data that will make the calculations simpler and/or faster.

.Level.java
[source,java]
----
include::level1.java[]
----

Then the `State` will represent a state of the game being solved.
It will follow the same path as the `Level`: it starts as a small class with few attributes (the current status of the game and a pointer to the `Level`) and becomes larger as features are added, for example to store the dynamic rules.

.State.java
[source,java]
----
include::state1.java[]
----

== The list of states

To manage the list of states several possibilities are available, like using a link:https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics)[FIFO queue] for link:https://en.wikipedia.org/wiki/Depth-first_search[depth-first search] or a link:https://en.wikipedia.org/wiki/Stack_(abstract_data_type)[stack] for link:https://en.wikipedia.org/wiki/Breadth-first_search[breadth-first search].

The choice depends of the type of problem and I don't have a criteria to choose: it something I tweak along.

My last projetc used a FIFO queue so let's use one.

.FiFoQueue.java
[source,java]
----
include::fifoqueue1.java[]
----

I use a custom implementation since the code is short and it's only doing what I need.

We can them add the code related to the state lists in the `Level`.

.Level.java
[source,java]
----
include::level2.java[]
----

Calling `State#processState` will add some new possible ``State``s to the list, so the minimal version of the solver loop is now complete.

== The entry point

The last part is the entry point of the game.

.App.java
[source,java]
----
include::app1.java[]
----

The workflow is now completed, and the program can be run to (kinda) solve the level:

[source]
----
include::log1.txt[]
----

That's it for the moment, in the next part I'll start adding some logic in the code to make good use of all this plumbing.