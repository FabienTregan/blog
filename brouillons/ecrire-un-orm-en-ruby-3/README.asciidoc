= Écrire un ORM en Ruby partie 3{nbsp}: filtrage et ordre
Julien Kirch
v0.1, 2020-05-10
:article_lang: fr
:source-highlighter: pygments
:pygments-style: friendly


.model.rb
[source,ruby]
----
class Model
  # @param [String] filter
  # @param [Array] params
  # @return [Model::QueryParameters]
  def self.where(filter, *params)
    QueryParameters.new(self).where(filter, *params)
  end

  # @param [String] order_by
  # @return [Model::QueryParameters]
  def self.order_by(order_by)
    QueryParameters.new(self).order_by(order_by)
  end

  # @param [Integer] limit
  # @return [Model::QueryParameters]
  def self.limit(limit)
    QueryParameters.new(self).limit(limit)
  end

  # @return [Array]
  def self.all
    QueryParameters.new(self).all
  end

  # @return [Object]
  def self.first
    QueryParameters.new(self).first
  end

  # @return [void]
  def self.truncate
    DATABASE.execute("DELETE FROM #{quoted_table_name}")
  end

  class QueryParameters

    attr_writer :limit
    attr_reader :wheres, :order_bys, :limit

    # @param [Class] model_class
    def initialize(model_class)
      @model_class = model_class
      @wheres = []
      @order_bys = []
      @limit = nil
    end

    # @param [String] filter
    # @param [Array] params
    # @return [Model::QueryParameters]
    def where(filter, *params)
      new_query_parameters = self.dup
      new_query_parameters.wheres << [filter, params]
      new_query_parameters
    end

    # @param [String] order_by
    # @return [Model::QueryParameters]
    def order_by(order_by)
      new_query_parameters = self.dup
      new_query_parameters.order_bys << order_by
      new_query_parameters
    end

    # @param [Integer] limit
    # @return [Model::QueryParameters]
    def limit(limit)
      new_query_parameters = self.dup
      new_query_parameters.limit = limit
      new_query_parameters
    end

    # @return [Array]
    def all
      quoted_columns_names = @model_class.columns.
          map { |column_name| SQLite3::Database.quote(column_name) }

      if @wheres.empty?
        where_clause = ' '
        where_params = []
      else
        where_clause = "WHERE #{@wheres.map { |filter| filter[0] }.join(' AND ')} "
        where_params = @wheres.map { |filter| filter[1] }.flatten
      end

      if @order_bys.empty?
        order_by_clause = ''
      else
        order_by_clause = "ORDER BY #{@order_bys.join(', ')} "
      end

      if @limit.nil?
        limit_clause = ' '
      else
        limit_clause = "LIMIT #{@limit} "
      end

      # Query looks like
      # SELECT column_name_1, column_name_2, …
      #   FROM 'table_name'
      #   WHERE column_1 = ? AND column_2 = ?
      #   LIMIT 10
      DATABASE.execute(
          "SELECT #{quoted_columns_names.join(', ')} " +
              "FROM #{@model_class.quoted_table_name} " +
              where_clause +
              order_by_clause +
              limit_clause,
          where_params
      ).map do |result_row|
        model_instance = @model_class.new
        @model_class.columns.each_with_index do |column, column_index|
          model_instance.send("#{column}=", result_row[column_index])
        end
        model_instance
      end
    end

    def first
      limit(1).all.first
    end
  end
end
----

.script.rb
[source,ruby]
----
require_relative 'model'
require_relative 'models'

Brick.truncate
Color.truncate

black = Color.new
black.name = 'Black'
black.insert

yellow = Color.new
yellow.name = 'Yellow'
yellow.insert

brick = Brick.new
brick.color_id = black.id
brick.name = 'Awesome brick'
brick.description = 'This brick is awesome'
brick.insert

puts '# All colors'
Color.all.each do |color|
  puts color.id
  puts color.name
end

puts '# All Bricks'
Brick.all.each do |brick|
  puts brick.id
  puts brick.name
  puts brick.description
  puts brick.color_id
end

puts '# Black color'
Color.where('name = ?', 'Black').all.each do |color|
  puts color.id
  puts color.name
end

puts '# Color by name'
Color.order_by('name desc').all.each do |color|
  puts color.id
  puts color.name
end

puts '# First color by desc name'
color = Color.order_by('name desc').first
puts color.id
puts color.name
----

[source,bash]
----
$ bundle exec ruby script.rb 
# All colors
73
Black
74
Yellow
# All Bricks
55
Awesome brick
This brick is awesome
73
# Black color
73
Black
# Color by name
74
Yellow
73
Black
# First color by name
74
Yellow
----
