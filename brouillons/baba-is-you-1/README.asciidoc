= Writing a "`Baba Is You`" solver, part 1
Julien Kirch
v0.1, 2019-05-05
:article_lang: en
:ignore_files: graph.mmd

link:https://hempuli.com/baba/[Baba Is You] is a great puzzle game with a more-than-usual complex gameplay since manipulating the game rules is part of the game.

I think it's a good candidate to write a solver for, and to write some articles documenting how I'm doing it.

As I've explained link:../solveurs/[in a previous article] (in French), the main engine of a puzzle solver is a loop used to iterate until we find a solution.

image::graph.svg[width=731,height=513]

But, first we need to be able to feed the data to the loop, which means reading the levels from disk.

== Create the project

First thing is to bootstrap the project.

A solver has often complex data types and you need to do much refactoring so a language with static types is great, and a fast language is nice to have to make things faster, so my tool of choice for this case is Java.

So first we intialize the repo:
[source,bash]
----
mvn archetype:generate \
-DgroupId=net.archiloque.babaisyousolver \
-DartifactId=babaisyousolver \
-DarchetypeArtifactId=maven-archetype-quickstart \
-DarchetypeVersion=1.4 \
-DinteractiveMode=false
----

Then we add the required files (`LICENSE.txt` â€¦) and push it to link:https://github.com/archiloque/babaisyousolver[GitHub].

== Designing how to read levels

For my other solvers, reading the levels link:https://github.com/archiloque/rgbexpress/blob/master/src/main/java/net/archiloque/rgbexpress/MapElement.java#L12[relied on a fixed list of elements with an associated character].

For Baba, the number of possible tiles seem large from the levels I've played so I'm thinking of using another strategy:

. Define all the possible tiles
. For each level, declare which tiles match with each character, for the tiles to be used in the level

Each level is a quare grid, and -- in the levels I've played so far -- there is at most one item per tile in the starting position (but you can have more during the game play).

image::first-level.png[title="The first level"]

I declare all the tiles we use yet, as a `String` to be referenced by the level, and as an `int` to be referenced by the game:

.Tiles.java
[source,Java]
----
package net.archiloque.babaisyousolver;

/**
 * All the tiles.
 * Should be declared in sorted order so the index 
 * of the items in {@link Tiles#ALL_STRINGS}
 * matches the values of the int items.
 */
final class Tiles {

  private Tiles() {
  }

  static final String BABA_STRING = "Baba";
  static final String BABA_TEXT_STRING = "Baba text";
  static final String FLAG_STRING = "flag";
  static final String FLAG_TEXT_STRING = "flag text";
  static final String IS_TEXT_STRING = "is text";
  static final String PUSH_TEXT_STRING = "push text";
  static final String ROCK_STRING = "rock";
  static final String ROCK_TEXT_STRING = "rock text";
  static final String STOP_TEXT_STRING = "stop text";
  static final String WALL_STRING = "wall";
  static final String WALL_TEXT_STRING = "wall text";
  static final String WIN_TEXT_STRING = "win text";
  static final String YOU_STRING = "you";
  static final String YOU_TEXT_STRING = "you text";

  static final String[] ALL_STRINGS = new String[]{
      BABA_STRING,
      BABA_TEXT_STRING,
      FLAG_STRING,
      FLAG_TEXT_STRING,
      IS_TEXT_STRING,
      PUSH_TEXT_STRING,
      ROCK_STRING,
      ROCK_TEXT_STRING,
      STOP_TEXT_STRING,
      WALL_STRING,
      WALL_TEXT_STRING,
      WIN_TEXT_STRING,
      YOU_STRING,
      YOU_TEXT_STRING,
  };


  static final int BABA = 1;
  static final int BABA_TEXT = BABA + 1;
  static final int FLAG = BABA_TEXT + 1;
  static final int FLAG_TEXT = FLAG + 1;
  static final int IS_TEXT = FLAG_TEXT + 1;
  static final int PUSH_TEXT = IS_TEXT + 1;
  static final int ROCK = PUSH_TEXT + 1;
  static final int ROCK_TEXT = ROCK + 1;
  static final int STOP_TEXT = ROCK_TEXT + 1;
  static final int WALL = STOP_TEXT + 1;
  static final int WALL_TEXT = WALL + 1;
  static final int WIN_TEXT = WALL_TEXT + 1;
  static final int YOU = WIN_TEXT + 1;

}
----

Perhaps later this file will become a pain to maintain so putting the content in a config file and generate the Java code from it will be later, but we'll see.

Drafting the API of how we'll read the level files:

.LevelReader.java
[source,Java]
----
package net.archiloque.babaisyousolver;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

final class LevelReader {

  private LevelReader() {
  }

  private final String TILES_FILES = "tiles.txt";
  private final String CONTENT_FILES = "content.txt";

  /**
   * Read a level from a directory.
   */
  @NotNull
  static LevelReaderResult readLevel(
      @NotNull Path levelDirectory)
      throws IOException {
    return readContent(levelDirectory, readTiles(levelDirectory));
  }

  /**
   * Read the tiles declaration
   * from the {@link LevelReader#TILES_FILES} file
   */
  static @NotNull Map<Character, Integer> readTiles(
      @NotNull Path levelDirectory) throws IOException {
    return new HashMap<>();
  }

  /**
   * Read the file content
   * from the {@link LevelReader#CONTENT_FILES} file
   * relying the declared tiles
   */
  static @NotNull LevelReaderResult readContent(
      @NotNull Path levelDirectory,
      @NotNull Map<Character,
          Integer> tiles) throws IOException {
    return null;
  }


  static final class LevelReaderResult {

    private final int width;

    private final int height;

    @NotNull
    private final int[] content;

    LevelReaderResult(
        int width,
        int height,
        int[] content) {
      this.width = width;
      this.height = height;
      this.content = content;
    }
  }
}
----