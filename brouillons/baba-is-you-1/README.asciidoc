= Writing a "`Baba Is You`" solver, part 1: reading levels
Julien Kirch
v0.1, 2019-05-05
:article_lang: en
:ignore_files: graph.mmd, tiles.txt, mvn.txt, content.txt, tiles.java, levelreader.java, levelreadertest.java, levelreader2.java
:source-highlighter: pygments
:pygments-style: friendly

link:https://hempuli.com/baba/[Baba Is You] is a great puzzle game with a more-than-usual complex gameplay since manipulating the game rules is part of the game.

I think it's a good candidate to write a solver for, and to write some articles documenting how I'm doing it.

As I've explained link:../solveurs/[in a previous article] (in French), a puzzle solver rely on a loop used to iterate until a solution is found.

image::graph.svg[width=731,height=513]

The first step is to be able to initialize the loop, which means reading the levels from disk.

== Create the project

First thing is to bootstrap the project.

A solver has often complex data types and you need to do much refactoring so a language with static types is great, and a fast language is nice to have to make things faster, so my tool of choice for this case is Java.

So first create the project:
[source,bash]
----
include::mvn.txt[]
----

Then add the required files (`LICENSE.txt` â€¦) and push it to link:https://github.com/archiloque/babaisyousolver[GitHub].

== Designing how to read levels

For my other solvers, reading the levels link:https://github.com/archiloque/rgbexpress/blob/master/src/main/java/net/archiloque/rgbexpress/MapElement.java#L12[relied on a fixed list of elements with an associated character].

For Baba, the number of possible tiles seem large from the levels I've played so I'm thinking of using another strategy:

. Define all the possible tiles
. For each level, declare which tiles match with each character, for the tiles to be used in the level

Levels use a square grid, and -- in the levels I've played so far -- there is at most one item per tile in the starting position (but you can have more during the game play).

image::first-level.png[title="The first level"]

What I'd like the files to be:

.tiles.txt
[source]
----
include::tiles.txt[]
----

.content.txt
[source]
----
include::content.txt[]
----

I declare all the tiles use by the first level, as a `String` to be referenced by the level, and as an `int` to be referenced by the game:

.Tiles.java
[source,java]
----
include::tiles.java[]
----

Perhaps later this file will become a pain to maintain so I'll end up putting the content in a config file and generate the Java code from it, but I'll see.

Drafting the API of how to read the level files:

.LevelReader.java
[source,java]
----
include::levelreader.java[]
----

All the content use arrays instead of arrays of arrays: it simplify the copying, and makes everything faster.

I use link:https://www.jetbrains.com/help/idea/annotating-source-code.html[JetBrains's annotations] extensively to handle nullability in my code, when I code with link:https://www.jetbrains.com/idea/[Idea] it's an acceptable substitute of have it build into the language.

Then define the tests (just showing the names):

.LevelReaderTest.java
[source,java]
----
include::levelreadertest.java[]
----

There's a bunch of test for error cases because I hate to debug the code when there's an error with the level files so the error are as explicit as possible.

Then fill the content of the reader:

.LevelReader.java
[source,java]
----
include::levelreader2.java[]
----

Now the code read a level from disk and will be able to start implementing the solving logic.