= Analyse d'une catastrophe
Julien Kirch
v1.0, 2020-02-06
:article_lang: fr
:article_image: disaster-girl.jpg
:article_description: Essayer d'apprendre des erreurs des autres

J'ai croisé quelques projets qui ont mal finis.
Je ne sais pas si tous les gros projets informatiques qui ont mal fini se ressemblent,
en tous cas ceux que j'ai croisé avaient un certain air de famille.

Un des points communs c'est que souvent on en parle peu à l'extérieur{nbsp}: pour plein de raisons on préfère laver son linge sale en interne, ou même faire comme si le projet avait été un succès pour éviter d'avoir à en tirer les conséquences.
Quand des articles sortent dans les journaux, suite à un problème particulièrement visible ou parce qu'une entreprise porte plainte contre un sous-traitant, les détails, passés au filtre des services juridiques, ne laissent pas grand chose à se mettre sous la dent.

Pour une fois ce n'est pas le cas : suite à un projet de migration qui a mal fini, la banque TSB a demandé un audit, et a eu le rare courage de link:https://www.tsb.co.uk/news-releases/slaughter-and-may/slaughter-and-may-report.pdf[le publier en intégralité].

La migration consistait à changer le système central de gestion bancaire de l'entreprise.
TSB est une sous-partie de du groupe bancaire Lloyds qui a été transformée en entreprise indépendante pour des raisons réglementaire.
Après la séparation, TSB a continué à utiliser le système informatique de la Lloyds contre redevance.

Si l'idée peut sembler bizarre, il s'agit d'une manière de faire classique dans ce genre de situation car elle permet une séparation rapide et sans risque des deux entités, même si elle n'est pas forcément pérenne sur le long terme.

Quelques années plus tard, le groupe bancaire espagnol Sabadel décide de racheter TSB.
Le modèle économique du plan de rachat s'appuyait sur le fait de migrer rapidement le système informatique utilisé par TSB sur le système développé par Sabadel, ce qui permettait d'économiser le prix de la redevance, d'autant que, selon l'échéancier fixé lors de la création de TSB, le prix à payer chaque année allait augmenter significativement.
D'autres banques rachetées par Sabadel avaient déjà été migrées sur son système informatique et les migrations s'étaient bien passées. Cela donnait confiance dans le fait que le plan pouvait se dérouler comme prévu.

La lecture me donne un douloureux sentiment de gâchis{nbsp}: tant de problèmes si prévisibles et de temps et d'effort gaspillés.

Si vous n'avez jamais eu la "`chance`" de participer ce genre de projets, je vous conseille vivement la lecture de ce rapport (ou au moins le résumé de quelques pages qui se trouve au début), et cela pour deux raisons.

Tout d'abord si un jour vous travaillez un un gros projets qui commence à tourner mal, cela vous permettra d'en reconnaître les symptômes à temps.
Je ne sais pas si cela vous permettra d'améliorer les choses, mais cela pourrait au moins vous aider à ne pas y laisser trop de plumes.

Ensuite les gros projets sont des petits projets à plus grande échelle, et cet effet grossissant permet de rendre plus facile à comprendre des mécanismes à l'œuvre même à des tailles plus petites.
Et pour le coup, cela pourrait vous aider à faire une différence.

J'ai relevé les points qui m'ont le plus marqués, je vais tenter d'expliquer comment chacun peut arriver, mais je ne proposerai pas forcément de solution.

''''

== Piloter un gros projet informatique n'est pas une mince affaire

Si on se moque souvent de l'incompétences des personnes chargées de piloter des projets informatique, on mentionne rarement la difficulté de leur tâche et le niveau de compétence que ça peut nécessiter{nbsp}: il faut maîtriser la gestion de projet "`standard`", mais aussi dans une certaine mesure les spécificités des différentes technologies.

Dans beaucoup d'organisations, comme par exemple les banques, les gros projets informatiques sont souvent parmi les projets les plus importants qu'elles ont à gérer, en terme de budget, de durée et de complexité.
Cela signifie en général que le pilotage est assuré par des membres de la direction, qui souvent ont des compétences faible en informatique.

La capacité d'un comité de pilotage a faire son travail dans ce genre de situation peut donc être limitée, et peut se limiter à vérifier que les choses sont faites selon les formes.

Si ces personnes peuvent être capable de comprendre les enjeux si on les leur explique, il peut leur être difficile de prendre du recul sur ce qu'on leur raconte, par exemple pour jauger du bien fondé ou du niveau de risque de telle ou telle décision.

== Les calendrier

[quote]
____
Il est difficile de faire des prévisions, surtout à propos du futur.
____

Prévoir la durée d'un projet informatique d'une certaine taille est un exercice compliqué et risqué rien de neuf là dedans.
Malheureusement il est souvent nécessaire pour pouvoir valider que le projet vaut la peine, et pouvoir organiser sa mise en œuvre.

Dans le cas qui nous occupe, la durée du projet a une incidence directe sur la rentabilité de toute l'opération, à cause du prix de la redevance à payer sur le logiciel existant.

Cela signifie que les retards peuvent avoir des effets importants.

Le rapport explique que le planning a été fait à rebours{nbsp}: une date satisfaisante pour la fin du projet a été choisie, et on s'est efforcé ensuite d'établir un calendrier permettant d'aboutir à cette date.

Dans certaines organisations, cette manière de faire est vue comme un signe de leadership{nbsp}:
la croyance est que faire un planning standard c'est prendre le risque de se faire avoir par différents groupes qui ne cherchent qu'à prendre leur temps.

Imposer sa volonté au système, en choisissant une date et en mettant la pression pour qu'elle soit tenue, est donc pris pour une démonstration de force de caractère.

Dans ce type de situation, annoncer un retard c'est donc défier la volonté de la personne haut-placée qui a choisi une date.

Cela peut avoir deux conséquences.

La première est sur la fiabilité des informations remontées.
En général l'effet est assez drastiques{nbsp}: tout ce qu'il est humainement possible sera mis en œuvre pour faire en sorte de cacher les problèmes tant que cela est possible.

L'exemple que j'ai vu régulièrement, et qui arrive encore ici, c'est de proposer de gagner du temps en testant des composants avant que leur développement ne soient terminés.
Sur le papier cela semble une bonne idée, mais dans la réalité cela signifie dans mon expérience d'avoir d'un côté des équipes de tests ne sachant pas si les problèmes sont dus à des bugs ou à des développements non terminés, et d'un autre des équipes de développement sous pression pour terminer des fonctionnalités recevant des rapports de bugs qu'elles n'ont donc pas le temps de traiter.

La deuxième est sur la capacité à gérer les risques{nbsp}: quand la pression est trop forte sur la tenue d'une date, il n'est plus possible de choisir rationnellement entre une solution risquée mais qui semble plus rapide et une solution moins risquée mais plus lente.
De fait, ce seront presque systématiquement les solutions les plus risquées qui seront choisies.

== Personnes qui pilotent n'ont pas l'habitude
=== Manque de compétence pour piloter

== Date à l'avance et qui ne bougent pas, et du coup un retro-planning
=== Date ambitieuse utilisée pour motiver les personnes, mais du coup d'autant plus difficile à bouger
=== Date qui permet des économies et qui a été budgétée
=== Lors d'un replanning, nouvelle date annoncée trop rapidement

== On prend le plus simple
=== Migration big bang
== Négociation sur les cibles à atteindre, différence entre acceptable non-acceptable

== Confiance des migrations passées alors que pas du même type
=== Cas du 80-20 : les points de détails font la différence

== Gestion des tests
=== En cas de retard, tentant de vouloir sacrifier les tests
=== Décalage des tests d'intégration au plus tard, alors qu'importante complexité
=== Test pendant les phases de développement

= Fournisseur interne

== Annoncé sans changement pour calmer les personnes alors que plein de changements

== Conclusion : beaucoup de personnes savaient probablement