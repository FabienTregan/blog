= Quelques autres savoir-faire utiles quand on développe
Julien Kirch
v0.1, 2019-08-04
:article_lang: fr

Les articles que je vois passer sur les savoir-faire utiles quand on développe sont plutôt centrés sur les aspects techniques ("`vous n'êtes pas un·e vrai·e développeur·euse si vous ne connaissez pas le language XXX`") ou les aspects interpersonnels ("`oubliez la technique, l'important pour faire du développement est de savoir communiquer`").

Ces deux aspects sont importants mais, quand je liste les compétences qui me sont utiles au jour le jour, je me dis qu'il manque des choses.

Mon avis est qu'on parle moins de ces savoir-faire là car ils sont moins facilement marketables, à l'inverse des compétences associées à des profils de _stars_, comme l'experte technique ou le coach.

== Tenir le rythme de ses mails

Dans une orga qui est de taille moyenne ou grande il y a plein de mails, pour de bonnes ou de mauvaises raisons.

Des mails dont le contenu est très utile, d'autres dont le contenu l'est moins.

Il faut trouver une manière de se tenir assez au courant de ce qui se passe, sans que ça consomme trop d'énergie, que ça soit de l'énergie à lire / organiser les mails ou de l'énergie à se sentir coupable de ne pas les lire.

== Relancer des personnes

Dans une organisation à plusieurs équipes il arrive régulièrement que des personnes s'engagent à faire des choses et ne les fassent pas toujours.

Il peut être important de savoir pourquoi ou de vouloir changer les choses.

Mais il est aussi important de savoir relancer des personnes quand vous avez besoin de leur aide, sans que cela vous coûte trop personnellement.
En effet rappeler une personne à ses obligations n'est pas forcément agréable.

== Lire de la documentation

Arriver à lire plusieurs pages de documentation sur un sujet.
En théorie tout le monde a les compétence pour le faire, en pratique il y a beaucoup de personnes que ça rebute, et qui préfèreront par exemple bidouiller avec le code plutôt que de lire de la doc.

== Lire de la mauvaise documentation

Il arrive que de la doc ne soit pas terrible

== Se retrouver dans du code qu'on ne connaît pas

Savoir faire du code propre/lisible/whatever c'est bien, savoir refactorer aussi, mais il faut aussi savoir se retrouver dans du code qu'on ne connaît pas.

Quand on utilise une bibliothèque, ou qu'on intervient dans une partie du code qu'on ne connaît pas, il faut arriver à trouver ses marques sans avoir l'opportunité de tout réécrire ou d'ajouter des tests.

== Conclusion

Plutôt des savoir-faire utiles pour faire avancer les choses, ils ne feront pas de vous une star mais vous permettront de faire avancer vous sujets, et de travailler de manière sereine.