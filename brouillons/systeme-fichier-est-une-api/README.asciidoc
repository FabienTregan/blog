= Gérer des fichiers, un puit sans fond
Julien Kirch
v1.0, 2020-05-02
:article_lang: fr

La gestion des fichiers est un comme un puit sans fond{nbsp}: plus on en apprend à leur sujet, plus on se rend compte que les choses sont plus compliquées qu'il n'y paraît, et que l'image mentale qu'on utilise pour y penser n'est pas tout à fait adapter.

Par gestion de fichier j'entend la partie du système qui est chargé de faire l'interface entre des demandes d'accès et le ou les disques durs qui stockent ces données.

== Une couche de service sans état au dessus d'un disque dur

Pour une personne qui développe une application, on peut voir la gestion des fichiers comme une simple API sans état au dessus d'un disque dur.

Dans cette vision, quand on appelle du code pour lire un fichier en lui passant un nom, il va demander au disque dur le contenu correspondant, le stocker dans un espace mémoire, et puis s'arrêter.

Et effectivement, c'est un peu comme cela que fonctionnaient les tous premiers systèmes.
Mais depuis les choses ont bien changé.

== Une couche de service à état au dessus d'un disque dur

Avec les besoins de performance, on a eu besoin d'ajouter du cache pour la lecture et l'écriture.

En lecture car on s'est aperçu que les systèmes relisaient souvent les mêmes fichiers, et que de garder leur contenu en mémoire accélérait les choses.
De même quand du code commence à lire un fichier, il va souvent ensuite accéder à la suite et il est donc intéressant de la lire en avance pour qu'elle soit déjà là quand le code la demande.

En écriture pour éviter de bloquer le système quand on demande d'écrire des fichiers sur le disque.

On en arrive au point où à force d'ajouter des couches au dessus du disque dur, on en arrive à ne plus savoir à quoi s'attendre de la part de la gestion de fichiers, et notamment qu'est ce qui est vraiment écrit sur le disque à quel moment.

https://lwn.net/Articles/799807/

== Un système de base de données

On a parlé jusque là de la lecture et de l'écriture, mais on fait aussi beaucoup de requêtes pour trouver des fichiers.

Ainsi, il devient également nécessaire de savoir quels sont les fichiers qu'on a cherché et qu'on n'a pas trouvé.

On se retrouve donc avec un système de requétage avec gestion de cache.

https://lwn.net/Articles/814535/

Les systèmes d'exploitation de bureau ou pour téléphones gèrent aussi de la recherche en indexant le contenu des fichiers et des métadonnées.

Avec ces deux éléments -- requêtage et indexation -- la gestion des fichiers ressemble donc à un système de base de données.

== Un moteur évènementiel

La dernière brique est le fait que parcourir un système de fichier est de plus en plus utilisé pour déclencher des évènements.

Si vous utilisez un langage de programmation comme Ruby, Node.js ou Python, il y a des chances qu'à chaque fois que vous changez de répertoire dans un terminal, votre système va chercher des fichiers `.ruby-version` `.nvmrc` ou `.python-version`, indiquant s'il faut changer la version de votre interpréteur à utiliser.

Changer de répertoire déclenche donc du code via différents hooks comme dans un système de plugins.

Du code exécuté ainsi peut bien entendu déclencher d'autres évènements s'il modifie lui-même des fichiers.

Pour l'instant cela est géré par chaque application, mais j'imagine bien qu'à l'avenir cela puisse se faire nativement pour plus de performance.

== Conclusion

La gestion des fichiers c'est donc quoi ? Une abstraction au dessus d'un disque dur, une base de donnée, ou un moteur à évènement ?

C'est un peu les trois, en fonction de ce que vous en faites, cela peut même être également un système en réseau et distribué si vous utilisez un système comme link:https://fr.wikipedia.org/wiki/Samba_(informatique)[Samba] ou link:https://fr.wikipedia.org/wiki/Network_File_System[NFS].

Ça montre à quel point des choses peuvent sembler simples peuvent être compliquées en informatique, et à quel point stocker des données d'une manière qui réponde aux besoins actuel est devenu d'une complexité insondable.