= Écrire un ORM en Ruby partie 4{nbsp}: relation
Julien Kirch
v0.1, 2020-05-10
:article_lang: fr
:source-highlighter: pygments
:pygments-style: friendly

.schema.rb
[source,ruby]
----
define_model 'Color' do |model_definition|
  model_definition.table 'color'
end

define_model 'Brick' do |model_definition|
  model_definition.table 'brick'
  model_definition.has_one(
      attribute_name: 'color',
      model_class: 'Color',
      column_name: 'color_id'
  )
end

define_model 'Kit' do |model_definition|
  model_definition.table 'kit'
end

define_model 'KitBricks' do |model_definition|
  model_definition.table 'kit_bricks'
  model_definition.has_one(
      attribute_name: 'kit',
      model_class: 'Kit',
      column_name: 'kit_id'
  )
  model_definition.has_one(
      attribute_name: 'brick',
      model_class: 'Brick',
      column_name: 'brick_id'
  )
end
----

.generator.rb
[source,ruby]
----
class ModelDefinition

  MODELS_DEFINITIONS = []

  attr_reader :name, :table_name, :has_ones

  # @param [String] name
  def initialize(name)
    @name = name
    @has_ones = []
    MODELS_DEFINITIONS << self
  end

  # …

  # @param [String] attribute_name
  # @param [String] model_class
  # @param [String] column_name
  # @return [void]
  def has_one(attribute_name:, model_class:, column_name:)
    @has_ones << {
        attribute_name: attribute_name,
        model_class: model_class,
        column_name: column_name
    }
  end
end
----

.models.rb.erb
[source]
----
  <% model.has_ones.each do |has_one| %>
  # @return [<%= has_one[:model_class] %>]
  def <%= has_one[:attribute_name] %>
    <%= has_one[:model_class] %>.where('id = ?', <%= has_one[:column_name] %>).first
  end

  # @param [<%= has_one[:model_class] %>] <%= has_one[:attribute_name] %>
  # @return [void]
  def <%= has_one[:attribute_name] %>=(<%= has_one[:attribute_name] %>)
    @<%= has_one[:column_name] %> = <%= has_one[:attribute_name] %>.id
  end
  <% end %>
----

.models.rb
[source,ruby]
----
class Brick < Model
  # …
    # @return [Color]
  def color
    Color.where('id = ?', color_id).first
  end

  # @param [Color] color
  # @return [void]
  def color=(color)
    @color_id = color.id
  end
end
----

.script.rb
[source,ruby]
----
require_relative 'model'
require_relative 'models'

black = Color.new
black.name = 'Black'
black.insert

brick = Brick.new
brick.color = black
brick.name = 'Awesome brick'
brick.description = 'This brick is awesome'
brick.insert

puts brick.color.name
----

[source,bash]
----
$ bundle exec ruby script.rb 
Black
----

.schema.rb
[source,ruby]
----
define_model 'Color' do |model_definition|
  model_definition.table 'color'
  model_definition.has_many(
      attribute_name: 'bricks',
      model_class: 'Brick',
      column_name: 'color_id'
  )
end

define_model 'Brick' do |model_definition|
  model_definition.table 'brick'
  model_definition.has_one(
      attribute_name: 'color',
      model_class: 'Color',
      column_name: 'color_id'
  )
  model_definition.has_many(
      attribute_name: 'kit_bricks',
      model_class: 'KitBricks',
      column_name: 'brick_id'
  )
end

define_model 'Kit' do |model_definition|
  model_definition.table 'kit'
  model_definition.has_many(
      attribute_name: 'kit_bricks',
      model_class: 'KitBricks',
      column_name: 'kit_id'
  )
end

define_model 'KitBricks' do |model_definition|
  model_definition.table 'kit_bricks'
  model_definition.has_one(
      attribute_name: 'kit',
      model_class: 'Kit',
      column_name: 'kit_id'
  )
  model_definition.has_one(
      attribute_name: 'brick',
      model_class: 'Brick',
      column_name: 'brick_id'
  )
end
----

.generator.rb
[source,ruby]
----
class ModelDefinition

  MODELS_DEFINITIONS = []

  attr_reader :name, :table_name, :has_ones, :has_manys

  # @param [String] name
  def initialize(name)
    @name = name
    @has_ones = []
    @has_manys = []
    MODELS_DEFINITIONS << self
  end

  # …

  def has_many(attribute_name:, model_class:, column_name:)
    @has_manys << {
        attribute_name: attribute_name,
        model_class: model_class,
        column_name: column_name
    }
  end
end
----

.models.rb.erb
[source]
----
  <% model.has_manys.each do |has_many| %>
  # @return [Array<<%= has_many[:model_class] %>>]
  def <%= has_many[:attribute_name] %>
    <%= has_many[:model_class] %>.where('<%= has_many[:column_name] %> = ?', id).all
  end
  <% end %>
----

.models.rb
[source,ruby]
----
class Color < Model

  # …

  # @return [Array<Brick>]
  def bricks
    Brick.where('color_id = ?', id).all
  end

end
----

.script.rb
[source,ruby]
----
require_relative 'model'
require_relative 'models'

Brick.truncate
Color.truncate

black = Color.new
black.name = 'Black'
black.insert

yellow = Color.new
yellow.name = 'Yellow'
yellow.insert

brick = Brick.new
brick.color = black
brick.name = 'Awesome brick'
brick.description = 'This brick is awesome'
brick.insert

puts black.bricks.length
puts black.bricks.first.name
----

[source,bash]
----
$ bundle exec ruby script.rb 
1
Awesome brick
----