= Links - Soon
Julien Kirch
v1.0, 2020-01-01
:article_lang: en
:figure-caption!:

== link:https://martinfowler.com/articles/data-monolith-to-mesh.html[How to Move Beyond a Monolithic Data Lake to a Distributed Data Mesh]

[quote]
____
I personally don't envy the life of a data platform engineer. They need to consume data from teams who have no incentive in providing meaningful, truthful and correct data. They have very little understanding of the source domains that generate the data and lack the domain expertise in their teams. They need to provide data for a diverse set of needs, operational or analytical, without a clear understanding of the application of the data and access to the consuming domain's experts.
____

[quote]
____
In a mature and ideal situation, an operational system and it's team or organizational unit, are not only responsible for providing business capabilities but also responsible for providing the _truths of their business domain_ as source domain datasets. At enterprise scale there is never a one to one mapping between a domain concept and a source system. There are often many systems that can serve parts of the data that belongs to a domain, some legacy and some easy to change. Hence there might be many _source aligned datasets_ aka _reality datasets_ that ultimately need to be aggregated to a cohesive domain aligned dataset.
____

== link:https://www.confluent.io/blog/data-dichotomy-rethinking-the-way-we-treat-data-and-services/[The Data Dichotomy: Rethinking the Way We Treat Data and Services]

[quote]
____
Service-based approaches may have been around for a while, but they still offer relatively little insight into how to share significant datasets between services.

The underlying issue is that data and services don't sing too sweetly together. On one side, encapsulation encourages us to hide data; decoupling services from one another so they can continue to change and grow. This is about planning for the future. But on the other side, we need the freedom to slice and dice shared data like any other dataset. This is about getting on with our job right now, with the same freedoms as any other data system.

But data systems have little to do with encapsulation. In fact, quite the contrary. Databases do everything they can to expose the data they hold. They come with a wonderfully powerful, declarative interface that can contort data into pretty much any shape you might desire. Exactly what you need for exploratory investigation, but not so great for managing the onset of complexity in a burgeoning service estate.
____

== link:https://www.philosophicalhacker.com/post/when-to-dry/[When should we create abstractions instead of duplication?]

[quote]
____
The problem here is that our feelings can mislead us, which probably partially explains the appeal of heuristics: we want something more as a guide.

Some readers -- and presumably Dodd -- would reply, "`But more experienced programmers have more trust-worthy feelings!`"

Maybe. But if we're to believe the science on expert judgment and intuition, the impact of experience in helpfully shaping our intuitions here is more limited than we think. Psychologist and behavioral economist Daniel Kahneman won a nobel prize partially because he taught us that expert judgement doesn't form simply because we've been doing something for a long time. For that judgment to form, we need specific feedback loopsfootnote:[Daniel Kahneman, Thinking Fast and Slow. Too lazy to find the specific pages. Just read all of it.], loops that are often absent for many programmers who have an average job tenure of 18 months or who use tools and languages that change quickly enough to inspire fatigue or who work for companies that undergo radical changes as they grow from tiny startups to large, proper businesses.
____

== link:https://bellmar.medium.com/toxic-and-woke-engineering-orgs-8abf20e07de5[Toxic and Woke Engineering Orgs]

[quote]
____
The biggest mistake organizations make with boundaries is over socializing. It's good to get people together informally from time to time. It's good to have staff parties, happy hours, maybe a company sports team or an outing. All of these things are great for team building and bonding. But the more often you turn the work space into a friend space the more people start to see their colleagues as friends.

That's problematic because people expect loyalty and conformity from their friends. Nobody really talks about it that way, but it's true. You want your friends to agree with you and when they don't it bothers you much more than it would if an acquaintance disagreed. The more strongly you feel about a subject, the more difficult it is for you to deal with disagreement from friends.
People need to be able to disagree at work. Teams can't make good decisions if they can't disagree. And while some friendships survive or even thrive on debate, people still tend to take dissent much more personally from their friends.

People also tend to take more liberties with their friends. You are less embarrassed about showing up late or inconveniencing a friend because you assume that close bond will guarantee you forgiveness. What's more, once workplaces start over socializing they tend to get defensive about it and see not engaging as a form of rejection in and of itself. Off hour events slowly become not optional. Not wanting to be BFFs or "`part of the family`" becomes an offense on equal level with missing deadlines and deliverables.
____

== link:https://lwn.net/ml/oss-security/192EDE83-5DF6-40A9-8928-1CD1739177A0@dwheeler.com/[CVE-2021-20177 kernel: iptables string match rule could result in kernel panic]

[quote]
____
I suspect in many cases there's a simple answer: who takes the *blame* when something goes wrong?

If someone updates a component when "`they don't have to`", and it causes a problem, that person
takes the fall: gets demoted, fired, whatever. If a component is not updated, and the system is
attacked, the *attacker** is blamed & the admins don't get demoted, fired, whatever. So updates are
rare & involve >1 year testing to ensure that the blame is fully distributed away from any one
person.

Some organizations make an explicit exception: if there's a CVE, then you *are* "`required`" to
update the component by policy. Then those who updated the component are no longer at serious
career risk, because when someone tries to blame the person who did the update, they can say "`I was
required to update by policy`".

In short, I think it's all about incentives.
____
