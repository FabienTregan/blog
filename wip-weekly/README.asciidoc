= Links - Soon
Julien Kirch
v1.0, 2019-01-01
:article_lang: en

== link:http://files.jneen.net/academic/thesis.pdf[Magritte: A Language for Pipe-Based Programming]

[quote]
____
Related to the shell-language design problem is the desktop-scripting problem: How should unrelated programs written in different languages be integrated -- especially in an ad-hoc manner in a desktop environment
Such a task can require a large amount of glue code, written by users who are unfamiliar with the inner workings of the programs they are using.
Notable attempts at solving the desktop-scripting problem include the TCL language and Guile Scheme.
However, while most of these approaches use a large, robust language, it still remains difficult to integrate them with external programs -- instead putting the burden on those programs to integrate with their system.
We believe a shell-based approach is promising, because if we are successful, our language could use the already-ubiquitous UNIX calling convention to integrate unrelated programs.
____

== link:https://gankra.github.io/blah/text-hates-you/[Text Rendering Hates You]

[quote]
____
Rendering text, how hard could it be? As it turns out, incredibly hard! To my knowledge, literally no system renders text "perfectly". It's all best-effort, although some efforts are more important than others.

I'll be assuming you want to support arbitrary text provided by users with custom fonts, colors, and styles with line-wrapping and support for text-selection. Basically the minimum required to properly display a simple rich-text document, terminal, webpage, or anything else.

The overarching theme here will be: there are no consistent right answers, everything is way more important than you think, and everything affects everything else.

The topics I focus on here have no particular rhyme or reason, they're just the ones that come to mind after a few years of working on rendering in Firefox. For instance, I don't spend much time talking about the challenges of text-segmentation or managing the different platform-specific text libraries, because I don't look at that much.
____

== link:https://devblogs.microsoft.com/oldnewthing/20191009-00/?p=102974[A window can’t have two timers with the same ID, so how do I assign an ID that nobody else is using?]

[quote]
____
The Set­Timer function creates a timer associated with a window. Timer IDs need to be unique, but if you have multiple pieces of code that all want to register a timer on the same window, you need to make sure they all come up with different timer IDs.

One way is to carve up the timer ID space so different components are assigned different ranges of timer IDs. But this means that if you add a new component, you’ll have to assign it a new range of IDs, and you might run into the case where you’ve link:https://en.wikipedia.org/wiki/IPv4_address_exhaustion[given away all the available values], and there are no more left to hand out.

And then there are components which may want to create timers on windows they didn’t create. For example, you may have a link:https://devblogs.microsoft.com/oldnewthing/20050211-00/?p=36473[windowless controls] framework, and those windowless controls may need a timer, but they don’t have a window to associate with the timer. They’ll have to somehow share the timer ID space of the windowed host without explicitly coordinating with each other.

A common solution is to use a pointer to ensure a unique number.

According to this convention, if you need a unique ID for a timer, just allocate some memory. You don’t need to allocate memory specifically for this purpose. You probably already allocated some memory, such as memory for your `this` pointer.

For as long as the memory is allocated, that pointer is uniquely yours. No other object can be assigned the same address, and you can use the pointer as the unique ID.

This technique generalizes to other ID assignment problems, as long as they are constrained to a single address space: For the ID, use the address of something that is uniquely yours.

The memory manager has unwittingly become the ID number registrar.
____
