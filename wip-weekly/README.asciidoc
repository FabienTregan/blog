= Links - Soon
Julien Kirch
v1.0, 2020-01-01
:article_lang: en

== link:https://modelviewculture.com/pieces/the-culture-war-in-open-source-is-on[The Culture War in Open Source is On]

[quote]
____
People often talk about open source as a commons, but if you go back and link:https://wtf.tw/text/ostrom_in_silicon_valley.pdf[read Elinor Ostrom]'s studies on pre-digital practices of commoning around the world, you’ll find that there are some important things missing. (She didn’t identify her work with feminism, but she is still the only woman to have won the Nobel in economics.) Ostrom recognized boundary-making as an essential practice for commoners -- defining who is a member and what purpose the commons serves, whether economic, social, or otherwise. She also found that a healthy commons depends on participants having a voice in changing its rules and norms, which is a far cry from the dictatorships-for-life that link:https://ntnsndr.in/implicit-feudalism[tend to rule open source]. If open source listened better to the legacy of commoning before it, projects wouldn’t just choose a license, they would start by adopting a link:https://communityrule.info/[governance structure] and finding a link:https://docs.opencollective.com/help/about/introduction[place to manage funds]. They would plan for economic and ethical self-determination -- autonomy was another principle Ostrom emphasized -- rather than outsourcing those matters to corporate whims.

Anyway, it is only natural that open source contributors should want to hack the process, not just the software they write. For all that open source has achieved, there is so much more that it hasn’t. "`The year of the Linux desktop`" has turned from an expectation to a joke, unless you count Google’s Android and Chromebooks. The open Web has closed shut. Surveillance-powered corporate platforms have accumulated power because of, not despite, open source. And the staggering homogeneity that still persists among open source developers testifies to the talent and life experience that their projects are missing.

If the early architects of open source feel threatened by a new generation demanding more, that is probably a sign of progress.
____

== link:http://www.firstpersonscholar.com/burn-the-glitch/[Burn the glitch?]

[quote]
____
In his germinal book _Archaeogaming An Introduction to Archaeology In and Of Video Games_, Andrew Reinhard devotes an entire section of Chapter 3 ("`Video Games as Archaeological Sites`") to exploring the idea that glitches are archaeological artefacts. As glitches can arise from errors in code, he compares them to the misfired pots that archaeologists discover during excavation (2018, 152). I would also compare them to the fingerprints that are found on pottery and other materials. Similar to glitches, these fingerprints provide more information about the production process and the labour involved. Further parallels can be drawn in that fingerprints can be intentional or unintentional, and are not necessarily imprinted by the original creator of the object (Králík and Nejman 2001, 11), as ceramics may have been produced in workshops resulting in numerous people working on and interacting with the ‘beta’ version of the pot before it was fired. Glitches and other perceived imperfections, like preserved fingerprints, also have an affective aspect in that they manifest the otherwise implicit human labour that went into the creation of analogue or digital craft. The glitch as queer agent invites player reflection on the process of the game’s creation, which otherwise could be obscured by its marketing and consumption as commercial product.
____

== link:https://nibblestew.blogspot.com/2020/03/its-not-what-programming-languages-do.html[It's not what programming languages do, it's what they shepherd you to]

[quote]
____
Shepherding: An invisible property of a progamming language and its ecosystem that drives people into solving problems in ways that are natural for the programming language itself rather than ways that are considered "`better`" in some sense. These may include things like long term maintainability, readability and performance.
____