= Soon
Julien Kirch
v1.0, 2019-01-01
:article_lang: en

== link:http://okmij.org/ftp/kakuritu/logic-programming.html[HANSEI as a Declarative Logic Programming Language]

[quote]
____
Classical Prolog is an elegant language that concisely represents the fundamental concepts of term algebra, non-determinism, unification, counter-example driven search, and the separation of logic and control. The ability to run a program forwards and backwards is uncanny. However, real Prolog programs are replete with cuts, FFI calls, committed choice and unexpected divergence -- defiling the Classical purity.

Classical Prolog is an enchanting misconception. It ought to be studied, for its ideas and lessons. One lesson is that guessing -- non-determinism -- is fundamental, but should not be the default mode of execution. One should guess, but guess lazily.
____

== link:https://www.reddit.com/r/programming/comments/bgw2a3/your_cs_degree_wont_prepare_you_for_angry_users/elo94fm/[Your CS Degree Won’t Prepare You For Angry Users, Legacy Code, or the Whims of Other]

[quote]
____
The tendency to want to "fix" things is sometimes part of the problem. It's called lava flow pattern, and it's when your codebase is programmed in waves of different guiding design and architecture. One of the best things you can do in an old codebase is just follow existing patterns and design, even if you don't agree with them. If you're going to refactor anyway, make it very obvious where the line is between old and new, so that others know which design to follow where. Preferably putting the new stuff into a separate namespace or even library.
____

== link:https://shop.jcoglan.com/building-git/[Building Git]

[quote]
____
Every time multiple pieces of your program have an implicit agreement that’s not enforced, that’s an opportunity for a maintainer to change one piece of code without changing others that depend on it. This, rather than eliminating literal duplication of lines of code, is the essence of the DRY principle 
____