= SOA, Rest et urbanisation : ne jetez pas le bébé avec l'eau du bain
Julien Kirch
v0.0.1, 2015-06-16

SOA beaucoup d'horribles souvenirs car beaucoup de mauvaises idées mais aussi un certain nombres de patterns d'organisation qui ont fonctionné.

Rest : l'occasion de changer de stack technique et de changer d'approche des services, mais il ne faut pas commettre l'erreur d'oublier les leçons du passé.

== Urbanisation : pourquoi et pour qui ?

Pourquoi : avoir des services qui répondent le mieux aux besoins et mieux maitriser son SI.

Pour qui : tout le monde : les patterns peuvent se mettre en place de façon incrémentale.

Plus particulièrement :

- nombreuses applications
- métier compliqué : objects métiers riches, et des services complexes

== Communauté des consommateurs

Besoin : développer des services qui répondent le mieux aux besoins, améliorer la communication.

Mise en place de la communauté des consommateurs entre le fournisseur de service et les consommateurs

- définit les services ensemble en amont
- gère les versions, permet d'avoir une cadence partagée

Instances régulières + lieux d'échange

Point dur : gestion du budget. En 1-1 c'est facile, là plus compliqué.

== Réutilisation des modèles de données

Besoin : améliorer le partage des données, améliorer le partage des connaissance.

Eviter que chaque projet ne réinventent un modèle de client avec ses champs spécifiques.

Pour chaque type de donnée transverse, identifé des porteurs qui soient responsable

Technico-fonctionnel: composante métier, et composante technique, peut être plusieurs personnes mais doivent parler d'une seule voix.

Porteurs doivent être dans les projets, éviter les architectes-données qui designaient le modèle de donnée de tout le SI en UML.

Le mieux c'est de l'incarner dans les outils, tels qu'on le faisait avec WSDL en SOAP.

Code first ou design first, l'essentiel c'est d'avoir un format qui s'échange.

Rest a plusieurs outils, mais pas encore d'outil assez puissant et largement utilisé.

Bien un modèle de donnée pour les services, pas à utiliser tel-quel pour les modèles de persistance.

== Pattern royaume-émmissaire

Besoin : garder la maitrise de son SI

Définir des zones dans le SI. Dans une zone tous les services sont accessibles, entre les zones définir des émissaires.

Fournir un service c'est répondre à un contrat, limiter les services entre zones du SI permet de limiter l'adhérence et de garder un SI évolutif, ce qui est un des objectifs de départ des services.

S'appuie sur des mesures techniques : configuration de proxy / firewall , monitoring.

== Mais c'est compliqué

Il y a des outils mais l'essentiel est un travail entre personnes de groupes différents qu'il faut parvenir à faire travailler ensemble.

Donc oui c'est compliqué, mais un SI c'est autant un effort de personne qu'un effort technique, donc pas de bras pas de chocolat.

Anti-pattern: vouloir piloter par le haut, solution de facilité, mais mène à un SI mal adapté aux besoins.

Cible = négociation + instances pour trancher.

== Et sinon

Modèle client-fournisseur : modèles moins formel où chaque appli est responsable de ses services et de ses données.

Mode négocié vs. mode contractuel.

Peut fonctionner en ayant une bonne formalisation et une bonne rigueur, mais gare au relachement.
