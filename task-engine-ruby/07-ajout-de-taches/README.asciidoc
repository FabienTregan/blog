[#MDT-07]
= Partie 7 : {article-07-nom}

Pour le moment, quand le {mdt} est lancé il commence à traiter des tâches, et s'arrête quand il n'y en a plus.
Si j'ajoute des tâches après-coup, il ne se passe rien.
En effet une fois les workers en pause, aucun mécanisme ne les réveille quand d'autres tâches sont insérées dans la {bdd}.

L'un des avantage de l'utilisation de bus de messages comme ActiveMQ ou Kafka pour stocker les tâches d'une {mdt} par rapport à une {bdd} traditionnelle vient de leur fonctionnalités de notification, où le code du moteur peut écouter des évènements (ici les tâches qui sont ajoutées) envoyés par le bus, pour déclencher le traitement des tâches.

Redis fournit également ce type de méchanisme, mais c'est aussi le cas pour PostgreSQL à travers les fonctions link:https://www.postgresql.org/docs/current/sql-listen.html[`LISTEN`] et link:https://www.postgresql.org/docs/current/sql-notify.html[`NOTIFY`].

== Le principe des notifications

Lorsque les worker sont en train de tourner, après avoir terminé une tâche ils vont en chercher une autre, même si cette dernière a été ajoutée après le démarrage du {mdt}. Dans ce cas il n'y a rien de spécial à faire.

Par contre, lorsqu'au moins un des workers s'est arrêté car il n'a pas trouvé de tâche disponible, il faut le solliciter pour qu'il se remette au travail quand une nouvelle tâche est créée.

Cela permet que la nouvelle tâche soit traitée au plus vite, plutôt que d'attendre qu'un worker qui est déjà en train d'exécuter une autre tâche ne la termine.

Lorsqu'on insère une nouvelle tâche, il faudra donc envoyer une notification pour réveiller les worker qui pourraient être disponibles.

Pour cela j'utiliserai un thread supplémentaire qui sera chargé d'écouter les notifications envoyées pour réveiller les workers.

En Ruby, la classe link:https://ruby-doc.org/core-2.7.0/Queue.html[Queue] est destinée à ce type d'usage où des thread doivent s'attendre et communiquer entre eux.
Il s'agit d'une file (une sorte de liste dont les éléments sortent dans le même ordre que celui où ils sont insérés), à laquelle plusieurs threads peuvent accéder en parallèle.
Le comportement le plus intéressant pour un {mdt} est que si du code demande à récupérer un élément de la queue alors qu'elle est vide, le thread correspondant se mettra en attente jusqu'à ce qu'un élément soit disponible.

Il serait possible de manipuler directement les thread des workers comme pour l'arrêt du {mdt}, en passant les thread des workers en le statut `sleep` puis en les réveillant avec `Thread#wakeup`, mais `Queue` fournit une API prête à l'emploi pour cela, et cela évite d'avoir le genre de bugs pénibles qui apparaît quand on décide de réinventer la roue sur un sujet qui touche au threading.

Il faut garder en tête que le fonctionnement final doit être compatible avec le fait d'avoir plusieurs threads et plusieurs instances de {mdt}, et qu'il faut toujours pouvoir arrêter les différentes instances.

== La nouvelle boucle de traitement des workers

Le fonctionnement actuel des worker est celui-ci{nbsp}:

ifeval::["{backend}" == "docbook5"]
image::workflow_7_1.svg[scaledwidth=50%,align="center"]
endif::[]
ifeval::["{backend}" != "docbook5"]
image::{article-07-url}/workflow_7_1.svg[scaledwidth=50%,align="center"]
endif::[]

La demande d'arrêt du moteur et l'absence de tâche à exécuter mènent tous les deux à l'arrêt du worker.

Il faut ajouter une nouvelle boucle dans le schéma{nbsp}: en l'absence de tâche, au lieu de s'arrêter les workers doivent se mettre en pause en attendant une notification.

Lorsqu'on les réveille, ils vérifient que le moteur est toujours en fonctionnement, et dans ce cas se remettent à chercher une tâche.

ifeval::["{backend}" == "docbook5"]
image::workflow_7_2.svg[scaledwidth=50%,align="center"]
endif::[]
ifeval::["{backend}" != "docbook5"]
image::{article-07-url}/workflow_7_2.svg[scaledwidth=50%,align="center"]
endif::[]

On pourrait vouloir directement passer de la pause au fait de chercher des tâches à exécuter{nbsp}:

ifeval::["{backend}" == "docbook5"]
image::workflow_7_3.svg[scaledwidth=50%,align="center"]
endif::[]
ifeval::["{backend}" != "docbook5"]
image::{article-07-url}/workflow_7_3.svg[scaledwidth=50%,align="center"]
endif::[]

Mais dans ce cas, si le worker ne trouve pas de tâche à exécuter après avoir réveillé il ne peut pas s'arrêter mais seulement se remettre en sommeil, à moins d'ajouter du code spécifique pour cela.

La proposition précédente est donc un peu plus générique.

Pour implémenter le workflow, on peut utiliser une double boucle{nbsp}:

- la boucle extérieur vérifie l'extinction du moteur, et est déclenchée au réveil
- la boucle intérieur vérifier l'extinction et cherche la prochaine tâche, et est exécutée à chaque tâche

.task_engine.rb
[source,ruby]
----
module TaskEngine
  class Worker
    def execute
      while @engine.status == Engine::ENGINE_STATUS_RUNNING
        while (@engine.status == Engine::ENGINE_STATUS_RUNNING) && (task = try_acquire_task)
          # Execute the task
        end
        # Wait until the notification awakes the worker
        LOGGER.info("Worker #{@worker_index} is sleeping")
        # We don't care about the message we got from the queue
        # since we just want to be awaken
        @engine.queue.pop
        LOGGER.info("Worker #{@worker_index} is awaken")
      end
      LOGGER.info("Worker #{@worker_index} is stopping")
    end
  end
end
----

Pour recevoir la notification, je dois créer un nouveau thread, en effet l'écoute bloque l'exécution du thread qui attend d'être notifié.

Je créé ce thread dans le constructeur de l'``Engine``.

À la réception d'un message, il utilise la `Queue` pour réveiller un worker si l'un d'eux est disponible.

.task_engine.rb
[source,ruby]
----
module TaskEngine
  class Engine
    def initialize(instance)
    # …
    Thread.new do
      DB.listen(NOTIFICATION_CHANNEL, loop: true) do |_channel, _pid, task_class|
        LOGGER.info("Received notification for a task [#{task_class}]")
        unless @queue.num_waiting == 0
          LOGGER.info('Notifying worker')
          @queue.push(task_class)
        end
      end
    end
    # …
  end
----

Le nom de la classe de la tâche est envoyé dans la notification pour être logué, mais ne sert pas dans le reste du code, en tous cas pour le moment.

Il faut penser à ajouter une connection à la configuration de la base de donnée plus haut dans le fichier{nbsp}:

.task_engine.rb
[source,ruby]
----
module TaskEngine
  # Use at most one connexion per worker + the connexion for notifications
  DB = ::Sequel.connect(DATABASE_URL, max_connections: WORKERS_NUMBER + 1, logger: LOGGER)
end
----

== Envoyer une notification ou le contenu d'une tâche

Dans le modèle que je décris, le {mdt} reçoit des notification l'informant qu'une tâche devient disponible et il doit ensuite acquérir la tâche dans la {bdd}, et en passant récupérer les paramètres d'exécution.

Cela vient du fait que dans le système de notification de PostgreSQL les notifications sont envoyées à toutes les instances qui sont à l'écoute.

D'autres système de messages (par exemple ActiveMQ) permettent que chaque message ne soit reçu que par une instance au plus.
Dans ce cas l'acquisition de la tâche et la récupération des paramètres sont concentrés en une seule action{nbsp}: un {mdt} qui reçoit un message sait qu'il est le seul dans ce cas et peut donc directement exécuter la tâche.

Pour reprendre le vocabulaire de la partie 3, les systèmes de message comme ActiveMQ peuvent fournir du "`__exactly once__`".
Comme indiqué dans la partie 3, ce type de mécanisme est très difficile à mettre en œuvre de manière fiable, et en cas de crash du bus de message il y a des chances (même si elles sont faibles) que vous receviez le même message deux fois, il faut donc être préparé à cette éventualité.

== Pourquoi ne pas utiliser une `id` pour récupérer la prochaine tâche{nbsp}?

Lors de la création d'une tâche, le code connaît la tâche à créer et ses paramètres.

On pourrait vouloir utiliser ces informations pour simplifier l'acquisition de tâches{nsbp}: quand réveille un worker, au lieu de chercher la prochaine tâche à exécuter avec la requête existante, il pourrais plutôt chercher la tâche par son `id` une requête qui cherche si la tâche avec un certain `id` est toujours disponible, ce qui devrait rendre la requête plus rapide.

Malheureusement cette solution n'est pas adaptée au fait d'avoir plusieurs {mdts} qui s'exécutent simultanément quand plusieurs tâches sont crées.

Par exemple si du code créé deux tâches T1 et T2, et que deux instances du {mdt} disposent de workers en sommeil.
En utilisant la requête par défaut, le premier worker à se réveiller va récupérer T1, et le deuxième worker T2.
Si les deux workers cherchent T1 par son `id`, le premier worker va la trouver mais pas le deuxième.

Il lui faudra alors utiliser la requête par défaut pour déterminer si une autre tâche est disponible.
En échange d'une requête plus rapide, on aura donc exécuté une requête inutile.

== La partie notification

Pour déclencher la notification, j'ajoute l'appel à la méthode `notify` lors de la création d'une tâche{nbsp}:

.task_engine.rb
[source,ruby]
----
module TaskEngine
  # @param [String] task_class
  # @param [Hash] task_parameters
  def self.create_task(task_class, task_parameters)
    Task.create(
        task_class: task_class,
        task_parameters: Sequel.pg_json_wrap(task_parameters)
    )
    DB.notify(NOTIFICATION_CHANNEL, payload: task_class)
  end
end
----

On peut tester le fonctionnement en lançant le {mdt} dans une console, et en lançant la création de tâche dans une autre{nbsp}:

[source]
----
$ TASK_ENGINE_INSTANCE=instance_01 rake start_engine

Worker 2 is sleeping
Worker 3 is sleeping
Worker 0 is sleeping
Worker 1 is sleeping
Worker 4 is sleeping
Received notification for a task [TaskEngine::Tasks::WaitingTask]
Notifying worker
Worker 2 is awaken
Received notification for a task [TaskEngine::Tasks::WaitingTask]
Notifying worker
Worker 3 is awaken
Received notification for a task [TaskEngine::Tasks::WaitingTask]
Worker 2 starting task 1601
----

== Notifications et transations

Une des avantages d'utiliser le même outil pour stocker les données et gérer les messages et que les mêmes transactions s'appliquent aux deux.

Ainsi dans le code de `TaskEngine.create_task`, l'insertion de la tâche et l'envoi de la notification se font dans la même transation que le code appelant.

Cela signifie que qu'en cas de `rollback` la tâche n'est pas crée et la notification envoyée.

Par exemple si une tâche a besoin d'un objet métier créé juste avant, si la tâche est crée puis que la création de l'objet est rollbackée, la tâche ne pourra pas le trouver.

Si vos traitements ont un risque significatif de `rollbak`, cela peut être assez pratique car cela évite d'avoir à prendre en compte cette situation dans le code de la tâche.

En effet un `rollback` de transaction ne signifie pas forcément qu'une erreur s'est produite, mais peut être le signe d'une tentative de modification concurente, et dans ce cas arriver régulièrement.

Si on ne souhaite pas ce comportement, la création de tâche peut être isolée dans une transaction séparée, mais le comportement par défaut fournit une garantie qui peut être bien pratique.

Maintenant que le moteur sait traiter les ajouts de tâche, je vais m'intéresser au monitoring pour pouvoir commencer à suivre ce qui se passe.